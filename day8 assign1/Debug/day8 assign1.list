
day8 assign1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08001d1c  08001d1c  00002d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f24  08001f24  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001f24  08001f24  00002f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f2c  08001f2c  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f2c  08001f2c  00002f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f30  08001f30  00002f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001f34  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001519  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000071c  00000000  00000000  00004597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fb  00000000  00000000  00004e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001941b  00000000  00000000  00004f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fd1  00000000  00000000  0001e346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bdce  00000000  00000000  00020317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ac0e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c44  00000000  00000000  000ac128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000acd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  000acd8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001d04 	.word	0x08001d04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001d04 	.word	0x08001d04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <EEPROM_Init>:
 */


#include "eeprom.h"

void EEPROM_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	int ret;
	I2CInit();
 8000286:	f000 f965 	bl	8000554 <I2CInit>
	// optional -- check if eeprom is present
	I2CStart();
 800028a:	f000 f8a3 	bl	80003d4 <I2CStart>
	ret = I2CIsDeviceReady(EEPROM_W);
 800028e:	20a0      	movs	r0, #160	@ 0xa0
 8000290:	f000 f942 	bl	8000518 <I2CIsDeviceReady>
 8000294:	6078      	str	r0, [r7, #4]
	// if ret=0, eeprom not avail; otherwise, eeprom is avail.
	I2CStop();
 8000296:	f000 f8b9 	bl	800040c <I2CStop>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <EEPROM_Write>:

void EEPROM_Write(uint16_t addr, uint8_t byte[], uint8_t n) {
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b084      	sub	sp, #16
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	4603      	mov	r3, r0
 80002aa:	6039      	str	r1, [r7, #0]
 80002ac:	80fb      	strh	r3, [r7, #6]
 80002ae:	4613      	mov	r3, r2
 80002b0:	717b      	strb	r3, [r7, #5]
	uint8_t high = addr >> 8, low = addr & 0xFF;
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	72fb      	strb	r3, [r7, #11]
 80002ba:	88fb      	ldrh	r3, [r7, #6]
 80002bc:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 80002be:	f000 f889 	bl	80003d4 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 80002c2:	20a0      	movs	r0, #160	@ 0xa0
 80002c4:	f000 f8b8 	bl	8000438 <I2CSendSlaveAddress>
	I2CSendData(high);
 80002c8:	7afb      	ldrb	r3, [r7, #11]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f8ce 	bl	800046c <I2CSendData>
	I2CSendData(low);
 80002d0:	7abb      	ldrb	r3, [r7, #10]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f8ca 	bl	800046c <I2CSendData>
	for(int i=0; i<n; i++)
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	e009      	b.n	80002f2 <EEPROM_Write+0x50>
		I2CSendData(byte[i]);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	4413      	add	r3, r2
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f8c0 	bl	800046c <I2CSendData>
	for(int i=0; i<n; i++)
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	3301      	adds	r3, #1
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	797b      	ldrb	r3, [r7, #5]
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	dbf1      	blt.n	80002de <EEPROM_Write+0x3c>
	I2CStop();
 80002fa:	f000 f887 	bl	800040c <I2CStop>
}
 80002fe:	bf00      	nop
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <EEPROM_Read>:

void EEPROM_Read(uint16_t addr, uint8_t byte[], uint8_t n) {
 8000306:	b590      	push	{r4, r7, lr}
 8000308:	b085      	sub	sp, #20
 800030a:	af00      	add	r7, sp, #0
 800030c:	4603      	mov	r3, r0
 800030e:	6039      	str	r1, [r7, #0]
 8000310:	80fb      	strh	r3, [r7, #6]
 8000312:	4613      	mov	r3, r2
 8000314:	717b      	strb	r3, [r7, #5]
	int i;
	uint8_t high = addr >> 8, low = addr & 0xFF;
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	0a1b      	lsrs	r3, r3, #8
 800031a:	b29b      	uxth	r3, r3
 800031c:	72fb      	strb	r3, [r7, #11]
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 8000322:	f000 f857 	bl	80003d4 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 8000326:	20a0      	movs	r0, #160	@ 0xa0
 8000328:	f000 f886 	bl	8000438 <I2CSendSlaveAddress>
	I2CSendData(high);
 800032c:	7afb      	ldrb	r3, [r7, #11]
 800032e:	4618      	mov	r0, r3
 8000330:	f000 f89c 	bl	800046c <I2CSendData>
	I2CSendData(low);
 8000334:	7abb      	ldrb	r3, [r7, #10]
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f898 	bl	800046c <I2CSendData>
	I2CRepeatStart();
 800033c:	f000 f860 	bl	8000400 <I2CRepeatStart>
	I2CSendSlaveAddress(EEPROM_R);
 8000340:	20a1      	movs	r0, #161	@ 0xa1
 8000342:	f000 f879 	bl	8000438 <I2CSendSlaveAddress>
	for(i=0; i<n-1; i++)
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e009      	b.n	8000360 <EEPROM_Read+0x5a>
		byte[i] = I2CRecvDataAck();
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	683a      	ldr	r2, [r7, #0]
 8000350:	18d4      	adds	r4, r2, r3
 8000352:	f000 f8a9 	bl	80004a8 <I2CRecvDataAck>
 8000356:	4603      	mov	r3, r0
 8000358:	7023      	strb	r3, [r4, #0]
	for(i=0; i<n-1; i++)
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3301      	adds	r3, #1
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	797b      	ldrb	r3, [r7, #5]
 8000362:	3b01      	subs	r3, #1
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	429a      	cmp	r2, r3
 8000368:	dbf0      	blt.n	800034c <EEPROM_Read+0x46>
	byte[i] = I2CRecvDataNAck();
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	18d4      	adds	r4, r2, r3
 8000370:	f000 f8b6 	bl	80004e0 <I2CRecvDataNAck>
 8000374:	4603      	mov	r3, r0
 8000376:	7023      	strb	r3, [r4, #0]
	I2CStop();
 8000378:	f000 f848 	bl	800040c <I2CStop>
}
 800037c:	bf00      	nop
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	bd90      	pop	{r4, r7, pc}

08000384 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 800038c:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <DelayMs+0x44>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <DelayMs+0x48>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a0e      	ldr	r2, [pc, #56]	@ (80003d0 <DelayMs+0x4c>)
 8000398:	fba2 2303 	umull	r2, r3, r2, r3
 800039c:	099b      	lsrs	r3, r3, #6
 800039e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	fb02 f303 	mul.w	r3, r2, r3
 80003a8:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80003aa:	bf00      	nop
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <DelayMs+0x44>)
 80003ae:	685a      	ldr	r2, [r3, #4]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	1ad2      	subs	r2, r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d3f8      	bcc.n	80003ac <DelayMs+0x28>
}
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	3714      	adds	r7, #20
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	e0001000 	.word	0xe0001000
 80003cc:	20000000 	.word	0x20000000
 80003d0:	10624dd3 	.word	0x10624dd3

080003d4 <I2CStart>:
 *  Created on: Apr 2, 2024
 *      Author: kartik
 */
#include "i2c.h"

void I2CStart() {
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 80003d8:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <I2CStart+0x28>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a07      	ldr	r2, [pc, #28]	@ (80003fc <I2CStart+0x28>)
 80003de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003e2:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 80003e4:	bf00      	nop
 80003e6:	4b05      	ldr	r3, [pc, #20]	@ (80003fc <I2CStart+0x28>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0f9      	beq.n	80003e6 <I2CStart+0x12>
}
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40005400 	.word	0x40005400

08000400 <I2CRepeatStart>:

void I2CRepeatStart() {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	I2CStart();
 8000404:	f7ff ffe6 	bl	80003d4 <I2CStart>
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}

0800040c <I2CStop>:

void I2CStop() {
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000410:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <I2CStop+0x28>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a07      	ldr	r2, [pc, #28]	@ (8000434 <I2CStop+0x28>)
 8000416:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800041a:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 800041c:	bf00      	nop
 800041e:	4b05      	ldr	r3, [pc, #20]	@ (8000434 <I2CStop+0x28>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	f003 0302 	and.w	r3, r3, #2
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0f9      	beq.n	800041e <I2CStop+0x12>
}
 800042a:	bf00      	nop
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40005400 	.word	0x40005400

08000438 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr) {
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr
    // wait until address is sent
    I2C1->DR = slaveaddr;
 8000442:	4a09      	ldr	r2, [pc, #36]	@ (8000468 <I2CSendSlaveAddress+0x30>)
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000448:	bf00      	nop
 800044a:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <I2CSendSlaveAddress+0x30>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f003 0302 	and.w	r3, r3, #2
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f9      	beq.n	800044a <I2CSendSlaveAddress+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 8000456:	4b04      	ldr	r3, [pc, #16]	@ (8000468 <I2CSendSlaveAddress+0x30>)
 8000458:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2; // clear addr condition
 800045a:	4b03      	ldr	r3, [pc, #12]	@ (8000468 <I2CSendSlaveAddress+0x30>)
 800045c:	699b      	ldr	r3, [r3, #24]
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40005400 	.word	0x40005400

0800046c <I2CSendData>:

void I2CSendData(uint8_t val) {
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
    // send data in write mode
    // wait until address is sent
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000476:	bf00      	nop
 8000478:	4b0a      	ldr	r3, [pc, #40]	@ (80004a4 <I2CSendData+0x38>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0f9      	beq.n	8000478 <I2CSendData+0xc>
    // write dr and clear flags
    I2C1->DR = val;
 8000484:	4a07      	ldr	r2, [pc, #28]	@ (80004a4 <I2CSendData+0x38>)
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	6113      	str	r3, [r2, #16]
    // wait until data byte is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 800048a:	bf00      	nop
 800048c:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <I2CSendData+0x38>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	f003 0304 	and.w	r3, r3, #4
 8000494:	2b00      	cmp	r3, #0
 8000496:	d0f9      	beq.n	800048c <I2CSendData+0x20>
}
 8000498:	bf00      	nop
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40005400 	.word	0x40005400

080004a8 <I2CRecvDataAck>:

uint8_t I2CRecvDataAck(void) {
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 |= I2C_CR1_ACK | I2C_CR1_POS;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <I2CRecvDataAck+0x34>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a0a      	ldr	r2, [pc, #40]	@ (80004dc <I2CRecvDataAck+0x34>)
 80004b4:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80004b8:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 80004ba:	bf00      	nop
 80004bc:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <I2CRecvDataAck+0x34>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d0f9      	beq.n	80004bc <I2CRecvDataAck+0x14>
	// read content and clear flags
	val = (uint8_t)I2C1->DR;
 80004c8:	4b04      	ldr	r3, [pc, #16]	@ (80004dc <I2CRecvDataAck+0x34>)
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	71fb      	strb	r3, [r7, #7]
	return val;
 80004ce:	79fb      	ldrb	r3, [r7, #7]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40005400 	.word	0x40005400

080004e0 <I2CRecvDataNAck>:

uint8_t I2CRecvDataNAck(void) {
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 &= ~(I2C_CR1_ACK | I2C_CR1_POS);
 80004e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <I2CRecvDataNAck+0x34>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000514 <I2CRecvDataNAck+0x34>)
 80004ec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80004f0:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 80004f2:	bf00      	nop
 80004f4:	4b07      	ldr	r3, [pc, #28]	@ (8000514 <I2CRecvDataNAck+0x34>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0f9      	beq.n	80004f4 <I2CRecvDataNAck+0x14>
	// read content and clear flags
	val = I2C1->DR;
 8000500:	4b04      	ldr	r3, [pc, #16]	@ (8000514 <I2CRecvDataNAck+0x34>)
 8000502:	691b      	ldr	r3, [r3, #16]
 8000504:	71fb      	strb	r3, [r7, #7]
	return val;
 8000506:	79fb      	ldrb	r3, [r7, #7]
}
 8000508:	4618      	mov	r0, r3
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40005400 	.word	0x40005400

08000518 <I2CIsDeviceReady>:

int I2CIsDeviceReady(uint8_t slaveaddr) {
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f023 0301 	bic.w	r3, r3, #1
 8000528:	71fb      	strb	r3, [r7, #7]
    // wait until address is sent
    I2C1->DR = slaveaddr;
 800052a:	4a09      	ldr	r2, [pc, #36]	@ (8000550 <I2CIsDeviceReady+0x38>)
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000530:	bf00      	nop
 8000532:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <I2CIsDeviceReady+0x38>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <I2CIsDeviceReady+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 800053e:	4b04      	ldr	r3, [pc, #16]	@ (8000550 <I2CIsDeviceReady+0x38>)
 8000540:	699b      	ldr	r3, [r3, #24]
	return 1;
 8000542:	2301      	movs	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40005400 	.word	0x40005400

08000554 <I2CInit>:

void I2CInit() {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
    // enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000558:	4b43      	ldr	r3, [pc, #268]	@ (8000668 <I2CInit+0x114>)
 800055a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055c:	4a42      	ldr	r2, [pc, #264]	@ (8000668 <I2CInit+0x114>)
 800055e:	f043 0302 	orr.w	r3, r3, #2
 8000562:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 8000564:	2032      	movs	r0, #50	@ 0x32
 8000566:	f7ff ff0d 	bl	8000384 <DelayMs>

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800056a:	4b3f      	ldr	r3, [pc, #252]	@ (8000668 <I2CInit+0x114>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a3e      	ldr	r2, [pc, #248]	@ (8000668 <I2CInit+0x114>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3U << I2C1_SCL*2); // PB6
 8000576:	4b3d      	ldr	r3, [pc, #244]	@ (800066c <I2CInit+0x118>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a3c      	ldr	r2, [pc, #240]	@ (800066c <I2CInit+0x118>)
 800057c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000580:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SCL*2); // AF
 8000582:	4b3a      	ldr	r3, [pc, #232]	@ (800066c <I2CInit+0x118>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a39      	ldr	r2, [pc, #228]	@ (800066c <I2CInit+0x118>)
 8000588:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800058c:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SCL);   // open-drain
 800058e:	4b37      	ldr	r3, [pc, #220]	@ (800066c <I2CInit+0x118>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	4a36      	ldr	r2, [pc, #216]	@ (800066c <I2CInit+0x118>)
 8000594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000598:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SCL*2); // no pull-up/down
 800059a:	4b34      	ldr	r3, [pc, #208]	@ (800066c <I2CInit+0x118>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	4a33      	ldr	r2, [pc, #204]	@ (800066c <I2CInit+0x118>)
 80005a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80005a4:	60d3      	str	r3, [r2, #12]
    GPIOB->MODER &= ~(3U << I2C1_SDA*2); // PB7
 80005a6:	4b31      	ldr	r3, [pc, #196]	@ (800066c <I2CInit+0x118>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a30      	ldr	r2, [pc, #192]	@ (800066c <I2CInit+0x118>)
 80005ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005b0:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SDA*2); // AF
 80005b2:	4b2e      	ldr	r3, [pc, #184]	@ (800066c <I2CInit+0x118>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a2d      	ldr	r2, [pc, #180]	@ (800066c <I2CInit+0x118>)
 80005b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005bc:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SDA);   // open-drain
 80005be:	4b2b      	ldr	r3, [pc, #172]	@ (800066c <I2CInit+0x118>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	4a2a      	ldr	r2, [pc, #168]	@ (800066c <I2CInit+0x118>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c8:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SDA*2); // no pull-up/down
 80005ca:	4b28      	ldr	r3, [pc, #160]	@ (800066c <I2CInit+0x118>)
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	4a27      	ldr	r2, [pc, #156]	@ (800066c <I2CInit+0x118>)
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d4:	60d3      	str	r3, [r2, #12]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos); // for pin 6
 80005d6:	4b25      	ldr	r3, [pc, #148]	@ (800066c <I2CInit+0x118>)
 80005d8:	6a1b      	ldr	r3, [r3, #32]
 80005da:	4a24      	ldr	r2, [pc, #144]	@ (800066c <I2CInit+0x118>)
 80005dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005e0:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos); // for pin 7
 80005e2:	4b22      	ldr	r3, [pc, #136]	@ (800066c <I2CInit+0x118>)
 80005e4:	6a1b      	ldr	r3, [r3, #32]
 80005e6:	4a21      	ldr	r2, [pc, #132]	@ (800066c <I2CInit+0x118>)
 80005e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80005ec:	6213      	str	r3, [r2, #32]

    // enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80005ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000668 <I2CInit+0x114>)
 80005f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f2:	4a1d      	ldr	r2, [pc, #116]	@ (8000668 <I2CInit+0x114>)
 80005f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005f8:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 80005fa:	2032      	movs	r0, #50	@ 0x32
 80005fc:	f7ff fec2 	bl	8000384 <DelayMs>
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 8000600:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <I2CInit+0x11c>)
 8000602:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000606:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <I2CInit+0x11c>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN); // disable error interrupt
 800060e:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <I2CInit+0x11c>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <I2CInit+0x11c>)
 8000614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000618:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos); // standard mode (100 khz)
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <I2CInit+0x11c>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a14      	ldr	r2, [pc, #80]	@ (8000670 <I2CInit+0x11c>)
 8000620:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000624:	61d3      	str	r3, [r2, #28]
    // Enable Ack
    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <I2CInit+0x11c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a11      	ldr	r2, [pc, #68]	@ (8000670 <I2CInit+0x11c>)
 800062c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000630:	6013      	str	r3, [r2, #0]
    // Thigh and Tlow needs to be 5us each

    // Let's pick fPCLK1 = 16Mhz, TPCLK1 = 1/16Mhz = 62.5ns
    // Thigh = CCR * TPCLK1 => 5us = CCR * 62.5ns
    // CCR = 80
    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos); // 16Mhz PCLK
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <I2CInit+0x11c>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	4a0e      	ldr	r2, [pc, #56]	@ (8000670 <I2CInit+0x11c>)
 8000638:	f043 0310 	orr.w	r3, r3, #16
 800063c:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <I2CInit+0x11c>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a0b      	ldr	r2, [pc, #44]	@ (8000670 <I2CInit+0x11c>)
 8000644:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000648:	61d3      	str	r3, [r2, #28]
    // Maximum rise time.
    // Calculation is (maximum_rise_time / Tpclk) + 1
    // In SM mode maximum allowed SCL rise time is 1000ns
    // For TPCLK1 = 62.5ns => (1000ns / 62.5ns) + 1 = 16 + 1 = 17
    I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos); // program Trise to 17 for 100khz
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <I2CInit+0x11c>)
 800064c:	6a1b      	ldr	r3, [r3, #32]
 800064e:	4a08      	ldr	r2, [pc, #32]	@ (8000670 <I2CInit+0x11c>)
 8000650:	f043 0311 	orr.w	r3, r3, #17
 8000654:	6213      	str	r3, [r2, #32]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <I2CInit+0x11c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <I2CInit+0x11c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6013      	str	r3, [r2, #0]
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40020400 	.word	0x40020400
 8000670:	40005400 	.word	0x40005400

08000674 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0b0      	sub	sp, #192	@ 0xc0
 8000678:	af00      	add	r7, sp, #0
	char str[90];
	int choice ;
	char str1[90];

	SystemInit();
 800067a:	f000 f8c9 	bl	8000810 <SystemInit>
	UartInit(BAUD_9600);
 800067e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000682:	f000 f8fb 	bl	800087c <UartInit>
    EEPROM_Init();
 8000686:	f7ff fdfb 	bl	8000280 <EEPROM_Init>

	do
	{
		sprintf(str," \n\r Menu : \n\r. Write String : 1\n\r .Read String : 2\n\r");
 800068a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800068e:	493d      	ldr	r1, [pc, #244]	@ (8000784 <main+0x110>)
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f9f9 	bl	8000a88 <siprintf>
		UartPuts(str);
 8000696:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f988 	bl	80009b0 <UartPuts>

		sprintf(str,"select your choice ");
 80006a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006a4:	4938      	ldr	r1, [pc, #224]	@ (8000788 <main+0x114>)
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f9ee 	bl	8000a88 <siprintf>
		UartPuts(str);
 80006ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f97d 	bl	80009b0 <UartPuts>
		UartGets(str);
 80006b6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f994 	bl	80009e8 <UartGets>

		sscanf(str,"%d",&choice);
 80006c0:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80006c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006c8:	4930      	ldr	r1, [pc, #192]	@ (800078c <main+0x118>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f9fc 	bl	8000ac8 <siscanf>

		switch(choice) {
 80006d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d030      	beq.n	8000738 <main+0xc4>
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	dc44      	bgt.n	8000764 <main+0xf0>
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d002      	beq.n	80006e4 <main+0x70>
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d00c      	beq.n	80006fc <main+0x88>
 80006e2:	e03f      	b.n	8000764 <main+0xf0>

		case 0 :
			sprintf(str,"\n\r Thank You ! \n\r");
 80006e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006e8:	4929      	ldr	r1, [pc, #164]	@ (8000790 <main+0x11c>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f9cc 	bl	8000a88 <siprintf>
			UartPuts(str);
 80006f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f95b 	bl	80009b0 <UartPuts>
			break;
 80006fa:	e03e      	b.n	800077a <main+0x106>

		case 1 :
			sprintf(str,"\n\rEnter the String : ");
 80006fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000700:	4924      	ldr	r1, [pc, #144]	@ (8000794 <main+0x120>)
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f9c0 	bl	8000a88 <siprintf>
			UartPuts(str);
 8000708:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f94f 	bl	80009b0 <UartPuts>
			UartGets(str);
 8000712:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f966 	bl	80009e8 <UartGets>
			sscanf(str,"%s",str1);
 800071c:	1d3a      	adds	r2, r7, #4
 800071e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000722:	491d      	ldr	r1, [pc, #116]	@ (8000798 <main+0x124>)
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f9cf 	bl	8000ac8 <siscanf>
			EEPROM_Write(0x0020,(uint8_t*)str1,32);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2220      	movs	r2, #32
 800072e:	4619      	mov	r1, r3
 8000730:	2020      	movs	r0, #32
 8000732:	f7ff fdb6 	bl	80002a2 <EEPROM_Write>
			break ;
 8000736:	e020      	b.n	800077a <main+0x106>

		case 2 :
			sprintf(str,"\n\rRead the string : \n\r");
 8000738:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800073c:	4917      	ldr	r1, [pc, #92]	@ (800079c <main+0x128>)
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f9a2 	bl	8000a88 <siprintf>
			UartPuts(str);
 8000744:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f931 	bl	80009b0 <UartPuts>
			EEPROM_Read(0x0020,(uint8_t*)str1,32);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2220      	movs	r2, #32
 8000752:	4619      	mov	r1, r3
 8000754:	2020      	movs	r0, #32
 8000756:	f7ff fdd6 	bl	8000306 <EEPROM_Read>
			UartPuts(str1);
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f927 	bl	80009b0 <UartPuts>
		//	sprintf(str1,"\n\r");
		//	UartPuts(str);
			break ;
 8000762:	e00a      	b.n	800077a <main+0x106>

		default :
			sprintf(str,"Invalid Choice !");
 8000764:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000768:	490d      	ldr	r1, [pc, #52]	@ (80007a0 <main+0x12c>)
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f98c 	bl	8000a88 <siprintf>
			UartPuts(str);
 8000770:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f91b 	bl	80009b0 <UartPuts>

		}

	}

while(choice !=0);
 800077a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800077c:	2b00      	cmp	r3, #0
 800077e:	d184      	bne.n	800068a <main+0x16>

	while(1);
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <main+0x10c>
 8000784:	08001d1c 	.word	0x08001d1c
 8000788:	08001d54 	.word	0x08001d54
 800078c:	08001d68 	.word	0x08001d68
 8000790:	08001d6c 	.word	0x08001d6c
 8000794:	08001d80 	.word	0x08001d80
 8000798:	08001d98 	.word	0x08001d98
 800079c:	08001d9c 	.word	0x08001d9c
 80007a0:	08001db4 	.word	0x08001db4

080007a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007ac:	4a14      	ldr	r2, [pc, #80]	@ (8000800 <_sbrk+0x5c>)
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <_sbrk+0x60>)
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b8:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <_sbrk+0x64>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d102      	bne.n	80007c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <_sbrk+0x64>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	@ (800080c <_sbrk+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d207      	bcs.n	80007e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d4:	f000 f9a4 	bl	8000b20 <__errno>
 80007d8:	4603      	mov	r3, r0
 80007da:	220c      	movs	r2, #12
 80007dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007e2:	e009      	b.n	80007f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e4:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <_sbrk+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ea:	4b07      	ldr	r3, [pc, #28]	@ (8000808 <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	4a05      	ldr	r2, [pc, #20]	@ (8000808 <_sbrk+0x64>)
 80007f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007f6:	68fb      	ldr	r3, [r7, #12]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20020000 	.word	0x20020000
 8000804:	00000400 	.word	0x00000400
 8000808:	20000070 	.word	0x20000070
 800080c:	200001c0 	.word	0x200001c0

08000810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  DWT_Init();
 8000814:	f000 f802 	bl	800081c <DWT_Init>
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <DWT_Init+0x58>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	4a13      	ldr	r2, [pc, #76]	@ (8000874 <DWT_Init+0x58>)
 8000826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800082a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <DWT_Init+0x58>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	4a10      	ldr	r2, [pc, #64]	@ (8000874 <DWT_Init+0x58>)
 8000832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000836:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <DWT_Init+0x5c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0e      	ldr	r2, [pc, #56]	@ (8000878 <DWT_Init+0x5c>)
 800083e:	f023 0301 	bic.w	r3, r3, #1
 8000842:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <DWT_Init+0x5c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0b      	ldr	r2, [pc, #44]	@ (8000878 <DWT_Init+0x5c>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <DWT_Init+0x5c>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000856:	bf00      	nop
    __ASM volatile ("NOP");
 8000858:	bf00      	nop
    __ASM volatile ("NOP");
 800085a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <DWT_Init+0x5c>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf0c      	ite	eq
 8000864:	2301      	moveq	r3, #1
 8000866:	2300      	movne	r3, #0
 8000868:	b2db      	uxtb	r3, r3
}
 800086a:	4618      	mov	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000edf0 	.word	0xe000edf0
 8000878:	e0001000 	.word	0xe0001000

0800087c <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000884:	4b31      	ldr	r3, [pc, #196]	@ (800094c <UartInit+0xd0>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000888:	4a30      	ldr	r2, [pc, #192]	@ (800094c <UartInit+0xd0>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000890:	4b2f      	ldr	r3, [pc, #188]	@ (8000950 <UartInit+0xd4>)
 8000892:	6a1b      	ldr	r3, [r3, #32]
 8000894:	4a2e      	ldr	r2, [pc, #184]	@ (8000950 <UartInit+0xd4>)
 8000896:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800089a:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 800089c:	4b2c      	ldr	r3, [pc, #176]	@ (8000950 <UartInit+0xd4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000950 <UartInit+0xd4>)
 80008a2:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80008a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 80008a8:	4b29      	ldr	r3, [pc, #164]	@ (8000950 <UartInit+0xd4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a28      	ldr	r2, [pc, #160]	@ (8000950 <UartInit+0xd4>)
 80008ae:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80008b2:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80008b4:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <UartInit+0xd4>)
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	4a25      	ldr	r2, [pc, #148]	@ (8000950 <UartInit+0xd4>)
 80008ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80008be:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80008c0:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <UartInit+0xd4>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	4a22      	ldr	r2, [pc, #136]	@ (8000950 <UartInit+0xd4>)
 80008c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80008ca:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 80008cc:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <UartInit+0xd4>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	4a1f      	ldr	r2, [pc, #124]	@ (8000950 <UartInit+0xd4>)
 80008d2:	f023 030c 	bic.w	r3, r3, #12
 80008d6:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 80008d8:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <UartInit+0xd0>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	4a1b      	ldr	r2, [pc, #108]	@ (800094c <UartInit+0xd0>)
 80008de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e2:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 80008e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <UartInit+0xd8>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <UartInit+0xd8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 80008f0:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <UartInit+0xd8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80008fc:	d016      	beq.n	800092c <UartInit+0xb0>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000904:	d816      	bhi.n	8000934 <UartInit+0xb8>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 800090c:	d004      	beq.n	8000918 <UartInit+0x9c>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000914:	d005      	beq.n	8000922 <UartInit+0xa6>
 8000916:	e00d      	b.n	8000934 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000918:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <UartInit+0xd8>)
 800091a:	f240 6283 	movw	r2, #1667	@ 0x683
 800091e:	609a      	str	r2, [r3, #8]
			break;
 8000920:	e008      	b.n	8000934 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 8000922:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <UartInit+0xd8>)
 8000924:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000928:	609a      	str	r2, [r3, #8]
			break;
 800092a:	e003      	b.n	8000934 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <UartInit+0xd8>)
 800092e:	228b      	movs	r2, #139	@ 0x8b
 8000930:	609a      	str	r2, [r3, #8]
			break;
 8000932:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000934:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <UartInit+0xd8>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	4a06      	ldr	r2, [pc, #24]	@ (8000954 <UartInit+0xd8>)
 800093a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000
 8000954:	40004400 	.word	0x40004400

08000958 <UartPutch>:

void UartPutch(uint8_t ch) {
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 8000962:	bf00      	nop
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <UartPutch+0x28>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0f9      	beq.n	8000964 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 8000970:	4a03      	ldr	r2, [pc, #12]	@ (8000980 <UartPutch+0x28>)
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	6053      	str	r3, [r2, #4]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	40004400 	.word	0x40004400

08000984 <UartGetch>:

uint8_t UartGetch(void) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 800098a:	bf00      	nop
 800098c:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <UartGetch+0x28>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 0320 	and.w	r3, r3, #32
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0f9      	beq.n	800098c <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 8000998:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <UartGetch+0x28>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	71fb      	strb	r3, [r7, #7]
	return ch;
 800099e:	79fb      	ldrb	r3, [r7, #7]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40004400 	.word	0x40004400

080009b0 <UartPuts>:

void UartPuts(char str[]) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	e009      	b.n	80009d2 <UartPuts+0x22>
		UartPutch(str[i]);
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ffc6 	bl	8000958 <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3301      	adds	r3, #1
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1ef      	bne.n	80009be <UartPuts+0xe>
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <UartGets>:

void UartGets(char str[]) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	int i=0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 80009f4:	f7ff ffc6 	bl	8000984 <UartGetch>
 80009f8:	4603      	mov	r3, r0
 80009fa:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	7afa      	ldrb	r2, [r7, #11]
 8000a04:	701a      	strb	r2, [r3, #0]
		i++;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 8000a0c:	7afb      	ldrb	r3, [r7, #11]
 8000a0e:	2b0d      	cmp	r3, #13
 8000a10:	d1f0      	bne.n	80009f4 <UartGets+0xc>
	str[i] = '\n';
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	220a      	movs	r2, #10
 8000a1a:	701a      	strb	r2, [r3, #0]
	i++;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	4413      	add	r3, r2
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a34:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a38:	f7ff feea 	bl	8000810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490d      	ldr	r1, [pc, #52]	@ (8000a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0d      	ldr	r2, [pc, #52]	@ (8000a78 <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0a      	ldr	r4, [pc, #40]	@ (8000a80 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a62:	f000 f863 	bl	8000b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a66:	f7ff fe05 	bl	8000674 <main>

08000a6a <LoopForever>:

LoopForever:
  b LoopForever
 8000a6a:	e7fe      	b.n	8000a6a <LoopForever>
  ldr   r0, =_estack
 8000a6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000a78:	08001f34 	.word	0x08001f34
  ldr r2, =_sbss
 8000a7c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000a80:	200001bc 	.word	0x200001bc

08000a84 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC_IRQHandler>
	...

08000a88 <siprintf>:
 8000a88:	b40e      	push	{r1, r2, r3}
 8000a8a:	b500      	push	{lr}
 8000a8c:	b09c      	sub	sp, #112	@ 0x70
 8000a8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8000a90:	9002      	str	r0, [sp, #8]
 8000a92:	9006      	str	r0, [sp, #24]
 8000a94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000a98:	4809      	ldr	r0, [pc, #36]	@ (8000ac0 <siprintf+0x38>)
 8000a9a:	9107      	str	r1, [sp, #28]
 8000a9c:	9104      	str	r1, [sp, #16]
 8000a9e:	4909      	ldr	r1, [pc, #36]	@ (8000ac4 <siprintf+0x3c>)
 8000aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8000aa4:	9105      	str	r1, [sp, #20]
 8000aa6:	6800      	ldr	r0, [r0, #0]
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	a902      	add	r1, sp, #8
 8000aac:	f000 f9b8 	bl	8000e20 <_svfiprintf_r>
 8000ab0:	9b02      	ldr	r3, [sp, #8]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	b01c      	add	sp, #112	@ 0x70
 8000ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8000abc:	b003      	add	sp, #12
 8000abe:	4770      	bx	lr
 8000ac0:	20000004 	.word	0x20000004
 8000ac4:	ffff0208 	.word	0xffff0208

08000ac8 <siscanf>:
 8000ac8:	b40e      	push	{r1, r2, r3}
 8000aca:	b530      	push	{r4, r5, lr}
 8000acc:	b09c      	sub	sp, #112	@ 0x70
 8000ace:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000ad0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000ad4:	f854 5b04 	ldr.w	r5, [r4], #4
 8000ad8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000adc:	9002      	str	r0, [sp, #8]
 8000ade:	9006      	str	r0, [sp, #24]
 8000ae0:	f7ff fb76 	bl	80001d0 <strlen>
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <siscanf+0x4c>)
 8000ae6:	9003      	str	r0, [sp, #12]
 8000ae8:	9007      	str	r0, [sp, #28]
 8000aea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000aec:	480a      	ldr	r0, [pc, #40]	@ (8000b18 <siscanf+0x50>)
 8000aee:	9401      	str	r4, [sp, #4]
 8000af0:	2300      	movs	r3, #0
 8000af2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000af4:	9314      	str	r3, [sp, #80]	@ 0x50
 8000af6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000afa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000afe:	462a      	mov	r2, r5
 8000b00:	4623      	mov	r3, r4
 8000b02:	a902      	add	r1, sp, #8
 8000b04:	6800      	ldr	r0, [r0, #0]
 8000b06:	f000 fadf 	bl	80010c8 <__ssvfiscanf_r>
 8000b0a:	b01c      	add	sp, #112	@ 0x70
 8000b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b10:	b003      	add	sp, #12
 8000b12:	4770      	bx	lr
 8000b14:	08000b1d 	.word	0x08000b1d
 8000b18:	20000004 	.word	0x20000004

08000b1c <__seofread>:
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__errno>:
 8000b20:	4b01      	ldr	r3, [pc, #4]	@ (8000b28 <__errno+0x8>)
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000004 	.word	0x20000004

08000b2c <__libc_init_array>:
 8000b2c:	b570      	push	{r4, r5, r6, lr}
 8000b2e:	4d0d      	ldr	r5, [pc, #52]	@ (8000b64 <__libc_init_array+0x38>)
 8000b30:	4c0d      	ldr	r4, [pc, #52]	@ (8000b68 <__libc_init_array+0x3c>)
 8000b32:	1b64      	subs	r4, r4, r5
 8000b34:	10a4      	asrs	r4, r4, #2
 8000b36:	2600      	movs	r6, #0
 8000b38:	42a6      	cmp	r6, r4
 8000b3a:	d109      	bne.n	8000b50 <__libc_init_array+0x24>
 8000b3c:	4d0b      	ldr	r5, [pc, #44]	@ (8000b6c <__libc_init_array+0x40>)
 8000b3e:	4c0c      	ldr	r4, [pc, #48]	@ (8000b70 <__libc_init_array+0x44>)
 8000b40:	f001 f8e0 	bl	8001d04 <_init>
 8000b44:	1b64      	subs	r4, r4, r5
 8000b46:	10a4      	asrs	r4, r4, #2
 8000b48:	2600      	movs	r6, #0
 8000b4a:	42a6      	cmp	r6, r4
 8000b4c:	d105      	bne.n	8000b5a <__libc_init_array+0x2e>
 8000b4e:	bd70      	pop	{r4, r5, r6, pc}
 8000b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b54:	4798      	blx	r3
 8000b56:	3601      	adds	r6, #1
 8000b58:	e7ee      	b.n	8000b38 <__libc_init_array+0xc>
 8000b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b5e:	4798      	blx	r3
 8000b60:	3601      	adds	r6, #1
 8000b62:	e7f2      	b.n	8000b4a <__libc_init_array+0x1e>
 8000b64:	08001f2c 	.word	0x08001f2c
 8000b68:	08001f2c 	.word	0x08001f2c
 8000b6c:	08001f2c 	.word	0x08001f2c
 8000b70:	08001f30 	.word	0x08001f30

08000b74 <__retarget_lock_acquire_recursive>:
 8000b74:	4770      	bx	lr

08000b76 <__retarget_lock_release_recursive>:
 8000b76:	4770      	bx	lr

08000b78 <_free_r>:
 8000b78:	b538      	push	{r3, r4, r5, lr}
 8000b7a:	4605      	mov	r5, r0
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d041      	beq.n	8000c04 <_free_r+0x8c>
 8000b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b84:	1f0c      	subs	r4, r1, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bfb8      	it	lt
 8000b8a:	18e4      	addlt	r4, r4, r3
 8000b8c:	f000 f8e0 	bl	8000d50 <__malloc_lock>
 8000b90:	4a1d      	ldr	r2, [pc, #116]	@ (8000c08 <_free_r+0x90>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	b933      	cbnz	r3, 8000ba4 <_free_r+0x2c>
 8000b96:	6063      	str	r3, [r4, #4]
 8000b98:	6014      	str	r4, [r2, #0]
 8000b9a:	4628      	mov	r0, r5
 8000b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ba0:	f000 b8dc 	b.w	8000d5c <__malloc_unlock>
 8000ba4:	42a3      	cmp	r3, r4
 8000ba6:	d908      	bls.n	8000bba <_free_r+0x42>
 8000ba8:	6820      	ldr	r0, [r4, #0]
 8000baa:	1821      	adds	r1, r4, r0
 8000bac:	428b      	cmp	r3, r1
 8000bae:	bf01      	itttt	eq
 8000bb0:	6819      	ldreq	r1, [r3, #0]
 8000bb2:	685b      	ldreq	r3, [r3, #4]
 8000bb4:	1809      	addeq	r1, r1, r0
 8000bb6:	6021      	streq	r1, [r4, #0]
 8000bb8:	e7ed      	b.n	8000b96 <_free_r+0x1e>
 8000bba:	461a      	mov	r2, r3
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	b10b      	cbz	r3, 8000bc4 <_free_r+0x4c>
 8000bc0:	42a3      	cmp	r3, r4
 8000bc2:	d9fa      	bls.n	8000bba <_free_r+0x42>
 8000bc4:	6811      	ldr	r1, [r2, #0]
 8000bc6:	1850      	adds	r0, r2, r1
 8000bc8:	42a0      	cmp	r0, r4
 8000bca:	d10b      	bne.n	8000be4 <_free_r+0x6c>
 8000bcc:	6820      	ldr	r0, [r4, #0]
 8000bce:	4401      	add	r1, r0
 8000bd0:	1850      	adds	r0, r2, r1
 8000bd2:	4283      	cmp	r3, r0
 8000bd4:	6011      	str	r1, [r2, #0]
 8000bd6:	d1e0      	bne.n	8000b9a <_free_r+0x22>
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	6053      	str	r3, [r2, #4]
 8000bde:	4408      	add	r0, r1
 8000be0:	6010      	str	r0, [r2, #0]
 8000be2:	e7da      	b.n	8000b9a <_free_r+0x22>
 8000be4:	d902      	bls.n	8000bec <_free_r+0x74>
 8000be6:	230c      	movs	r3, #12
 8000be8:	602b      	str	r3, [r5, #0]
 8000bea:	e7d6      	b.n	8000b9a <_free_r+0x22>
 8000bec:	6820      	ldr	r0, [r4, #0]
 8000bee:	1821      	adds	r1, r4, r0
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	bf04      	itt	eq
 8000bf4:	6819      	ldreq	r1, [r3, #0]
 8000bf6:	685b      	ldreq	r3, [r3, #4]
 8000bf8:	6063      	str	r3, [r4, #4]
 8000bfa:	bf04      	itt	eq
 8000bfc:	1809      	addeq	r1, r1, r0
 8000bfe:	6021      	streq	r1, [r4, #0]
 8000c00:	6054      	str	r4, [r2, #4]
 8000c02:	e7ca      	b.n	8000b9a <_free_r+0x22>
 8000c04:	bd38      	pop	{r3, r4, r5, pc}
 8000c06:	bf00      	nop
 8000c08:	200001b8 	.word	0x200001b8

08000c0c <sbrk_aligned>:
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8000c4c <sbrk_aligned+0x40>)
 8000c10:	460c      	mov	r4, r1
 8000c12:	6831      	ldr	r1, [r6, #0]
 8000c14:	4605      	mov	r5, r0
 8000c16:	b911      	cbnz	r1, 8000c1e <sbrk_aligned+0x12>
 8000c18:	f000 ff34 	bl	8001a84 <_sbrk_r>
 8000c1c:	6030      	str	r0, [r6, #0]
 8000c1e:	4621      	mov	r1, r4
 8000c20:	4628      	mov	r0, r5
 8000c22:	f000 ff2f 	bl	8001a84 <_sbrk_r>
 8000c26:	1c43      	adds	r3, r0, #1
 8000c28:	d103      	bne.n	8000c32 <sbrk_aligned+0x26>
 8000c2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000c2e:	4620      	mov	r0, r4
 8000c30:	bd70      	pop	{r4, r5, r6, pc}
 8000c32:	1cc4      	adds	r4, r0, #3
 8000c34:	f024 0403 	bic.w	r4, r4, #3
 8000c38:	42a0      	cmp	r0, r4
 8000c3a:	d0f8      	beq.n	8000c2e <sbrk_aligned+0x22>
 8000c3c:	1a21      	subs	r1, r4, r0
 8000c3e:	4628      	mov	r0, r5
 8000c40:	f000 ff20 	bl	8001a84 <_sbrk_r>
 8000c44:	3001      	adds	r0, #1
 8000c46:	d1f2      	bne.n	8000c2e <sbrk_aligned+0x22>
 8000c48:	e7ef      	b.n	8000c2a <sbrk_aligned+0x1e>
 8000c4a:	bf00      	nop
 8000c4c:	200001b4 	.word	0x200001b4

08000c50 <_malloc_r>:
 8000c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c54:	1ccd      	adds	r5, r1, #3
 8000c56:	f025 0503 	bic.w	r5, r5, #3
 8000c5a:	3508      	adds	r5, #8
 8000c5c:	2d0c      	cmp	r5, #12
 8000c5e:	bf38      	it	cc
 8000c60:	250c      	movcc	r5, #12
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	4606      	mov	r6, r0
 8000c66:	db01      	blt.n	8000c6c <_malloc_r+0x1c>
 8000c68:	42a9      	cmp	r1, r5
 8000c6a:	d904      	bls.n	8000c76 <_malloc_r+0x26>
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	6033      	str	r3, [r6, #0]
 8000c70:	2000      	movs	r0, #0
 8000c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d4c <_malloc_r+0xfc>
 8000c7a:	f000 f869 	bl	8000d50 <__malloc_lock>
 8000c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c82:	461c      	mov	r4, r3
 8000c84:	bb44      	cbnz	r4, 8000cd8 <_malloc_r+0x88>
 8000c86:	4629      	mov	r1, r5
 8000c88:	4630      	mov	r0, r6
 8000c8a:	f7ff ffbf 	bl	8000c0c <sbrk_aligned>
 8000c8e:	1c43      	adds	r3, r0, #1
 8000c90:	4604      	mov	r4, r0
 8000c92:	d158      	bne.n	8000d46 <_malloc_r+0xf6>
 8000c94:	f8d8 4000 	ldr.w	r4, [r8]
 8000c98:	4627      	mov	r7, r4
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d143      	bne.n	8000d26 <_malloc_r+0xd6>
 8000c9e:	2c00      	cmp	r4, #0
 8000ca0:	d04b      	beq.n	8000d3a <_malloc_r+0xea>
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	eb04 0903 	add.w	r9, r4, r3
 8000cac:	f000 feea 	bl	8001a84 <_sbrk_r>
 8000cb0:	4581      	cmp	r9, r0
 8000cb2:	d142      	bne.n	8000d3a <_malloc_r+0xea>
 8000cb4:	6821      	ldr	r1, [r4, #0]
 8000cb6:	1a6d      	subs	r5, r5, r1
 8000cb8:	4629      	mov	r1, r5
 8000cba:	4630      	mov	r0, r6
 8000cbc:	f7ff ffa6 	bl	8000c0c <sbrk_aligned>
 8000cc0:	3001      	adds	r0, #1
 8000cc2:	d03a      	beq.n	8000d3a <_malloc_r+0xea>
 8000cc4:	6823      	ldr	r3, [r4, #0]
 8000cc6:	442b      	add	r3, r5
 8000cc8:	6023      	str	r3, [r4, #0]
 8000cca:	f8d8 3000 	ldr.w	r3, [r8]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	bb62      	cbnz	r2, 8000d2c <_malloc_r+0xdc>
 8000cd2:	f8c8 7000 	str.w	r7, [r8]
 8000cd6:	e00f      	b.n	8000cf8 <_malloc_r+0xa8>
 8000cd8:	6822      	ldr	r2, [r4, #0]
 8000cda:	1b52      	subs	r2, r2, r5
 8000cdc:	d420      	bmi.n	8000d20 <_malloc_r+0xd0>
 8000cde:	2a0b      	cmp	r2, #11
 8000ce0:	d917      	bls.n	8000d12 <_malloc_r+0xc2>
 8000ce2:	1961      	adds	r1, r4, r5
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	6025      	str	r5, [r4, #0]
 8000ce8:	bf18      	it	ne
 8000cea:	6059      	strne	r1, [r3, #4]
 8000cec:	6863      	ldr	r3, [r4, #4]
 8000cee:	bf08      	it	eq
 8000cf0:	f8c8 1000 	streq.w	r1, [r8]
 8000cf4:	5162      	str	r2, [r4, r5]
 8000cf6:	604b      	str	r3, [r1, #4]
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	f000 f82f 	bl	8000d5c <__malloc_unlock>
 8000cfe:	f104 000b 	add.w	r0, r4, #11
 8000d02:	1d23      	adds	r3, r4, #4
 8000d04:	f020 0007 	bic.w	r0, r0, #7
 8000d08:	1ac2      	subs	r2, r0, r3
 8000d0a:	bf1c      	itt	ne
 8000d0c:	1a1b      	subne	r3, r3, r0
 8000d0e:	50a3      	strne	r3, [r4, r2]
 8000d10:	e7af      	b.n	8000c72 <_malloc_r+0x22>
 8000d12:	6862      	ldr	r2, [r4, #4]
 8000d14:	42a3      	cmp	r3, r4
 8000d16:	bf0c      	ite	eq
 8000d18:	f8c8 2000 	streq.w	r2, [r8]
 8000d1c:	605a      	strne	r2, [r3, #4]
 8000d1e:	e7eb      	b.n	8000cf8 <_malloc_r+0xa8>
 8000d20:	4623      	mov	r3, r4
 8000d22:	6864      	ldr	r4, [r4, #4]
 8000d24:	e7ae      	b.n	8000c84 <_malloc_r+0x34>
 8000d26:	463c      	mov	r4, r7
 8000d28:	687f      	ldr	r7, [r7, #4]
 8000d2a:	e7b6      	b.n	8000c9a <_malloc_r+0x4a>
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	42a3      	cmp	r3, r4
 8000d32:	d1fb      	bne.n	8000d2c <_malloc_r+0xdc>
 8000d34:	2300      	movs	r3, #0
 8000d36:	6053      	str	r3, [r2, #4]
 8000d38:	e7de      	b.n	8000cf8 <_malloc_r+0xa8>
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	6033      	str	r3, [r6, #0]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	f000 f80c 	bl	8000d5c <__malloc_unlock>
 8000d44:	e794      	b.n	8000c70 <_malloc_r+0x20>
 8000d46:	6005      	str	r5, [r0, #0]
 8000d48:	e7d6      	b.n	8000cf8 <_malloc_r+0xa8>
 8000d4a:	bf00      	nop
 8000d4c:	200001b8 	.word	0x200001b8

08000d50 <__malloc_lock>:
 8000d50:	4801      	ldr	r0, [pc, #4]	@ (8000d58 <__malloc_lock+0x8>)
 8000d52:	f7ff bf0f 	b.w	8000b74 <__retarget_lock_acquire_recursive>
 8000d56:	bf00      	nop
 8000d58:	200001b0 	.word	0x200001b0

08000d5c <__malloc_unlock>:
 8000d5c:	4801      	ldr	r0, [pc, #4]	@ (8000d64 <__malloc_unlock+0x8>)
 8000d5e:	f7ff bf0a 	b.w	8000b76 <__retarget_lock_release_recursive>
 8000d62:	bf00      	nop
 8000d64:	200001b0 	.word	0x200001b0

08000d68 <__ssputs_r>:
 8000d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d6c:	688e      	ldr	r6, [r1, #8]
 8000d6e:	461f      	mov	r7, r3
 8000d70:	42be      	cmp	r6, r7
 8000d72:	680b      	ldr	r3, [r1, #0]
 8000d74:	4682      	mov	sl, r0
 8000d76:	460c      	mov	r4, r1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	d82d      	bhi.n	8000dd8 <__ssputs_r+0x70>
 8000d7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000d80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000d84:	d026      	beq.n	8000dd4 <__ssputs_r+0x6c>
 8000d86:	6965      	ldr	r5, [r4, #20]
 8000d88:	6909      	ldr	r1, [r1, #16]
 8000d8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d8e:	eba3 0901 	sub.w	r9, r3, r1
 8000d92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d96:	1c7b      	adds	r3, r7, #1
 8000d98:	444b      	add	r3, r9
 8000d9a:	106d      	asrs	r5, r5, #1
 8000d9c:	429d      	cmp	r5, r3
 8000d9e:	bf38      	it	cc
 8000da0:	461d      	movcc	r5, r3
 8000da2:	0553      	lsls	r3, r2, #21
 8000da4:	d527      	bpl.n	8000df6 <__ssputs_r+0x8e>
 8000da6:	4629      	mov	r1, r5
 8000da8:	f7ff ff52 	bl	8000c50 <_malloc_r>
 8000dac:	4606      	mov	r6, r0
 8000dae:	b360      	cbz	r0, 8000e0a <__ssputs_r+0xa2>
 8000db0:	6921      	ldr	r1, [r4, #16]
 8000db2:	464a      	mov	r2, r9
 8000db4:	f000 fe76 	bl	8001aa4 <memcpy>
 8000db8:	89a3      	ldrh	r3, [r4, #12]
 8000dba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc2:	81a3      	strh	r3, [r4, #12]
 8000dc4:	6126      	str	r6, [r4, #16]
 8000dc6:	6165      	str	r5, [r4, #20]
 8000dc8:	444e      	add	r6, r9
 8000dca:	eba5 0509 	sub.w	r5, r5, r9
 8000dce:	6026      	str	r6, [r4, #0]
 8000dd0:	60a5      	str	r5, [r4, #8]
 8000dd2:	463e      	mov	r6, r7
 8000dd4:	42be      	cmp	r6, r7
 8000dd6:	d900      	bls.n	8000dda <__ssputs_r+0x72>
 8000dd8:	463e      	mov	r6, r7
 8000dda:	6820      	ldr	r0, [r4, #0]
 8000ddc:	4632      	mov	r2, r6
 8000dde:	4641      	mov	r1, r8
 8000de0:	f000 fe35 	bl	8001a4e <memmove>
 8000de4:	68a3      	ldr	r3, [r4, #8]
 8000de6:	1b9b      	subs	r3, r3, r6
 8000de8:	60a3      	str	r3, [r4, #8]
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	4433      	add	r3, r6
 8000dee:	6023      	str	r3, [r4, #0]
 8000df0:	2000      	movs	r0, #0
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	462a      	mov	r2, r5
 8000df8:	f000 fe62 	bl	8001ac0 <_realloc_r>
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	2800      	cmp	r0, #0
 8000e00:	d1e0      	bne.n	8000dc4 <__ssputs_r+0x5c>
 8000e02:	6921      	ldr	r1, [r4, #16]
 8000e04:	4650      	mov	r0, sl
 8000e06:	f7ff feb7 	bl	8000b78 <_free_r>
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	f8ca 3000 	str.w	r3, [sl]
 8000e10:	89a3      	ldrh	r3, [r4, #12]
 8000e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e16:	81a3      	strh	r3, [r4, #12]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e1c:	e7e9      	b.n	8000df2 <__ssputs_r+0x8a>
	...

08000e20 <_svfiprintf_r>:
 8000e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e24:	4698      	mov	r8, r3
 8000e26:	898b      	ldrh	r3, [r1, #12]
 8000e28:	061b      	lsls	r3, r3, #24
 8000e2a:	b09d      	sub	sp, #116	@ 0x74
 8000e2c:	4607      	mov	r7, r0
 8000e2e:	460d      	mov	r5, r1
 8000e30:	4614      	mov	r4, r2
 8000e32:	d510      	bpl.n	8000e56 <_svfiprintf_r+0x36>
 8000e34:	690b      	ldr	r3, [r1, #16]
 8000e36:	b973      	cbnz	r3, 8000e56 <_svfiprintf_r+0x36>
 8000e38:	2140      	movs	r1, #64	@ 0x40
 8000e3a:	f7ff ff09 	bl	8000c50 <_malloc_r>
 8000e3e:	6028      	str	r0, [r5, #0]
 8000e40:	6128      	str	r0, [r5, #16]
 8000e42:	b930      	cbnz	r0, 8000e52 <_svfiprintf_r+0x32>
 8000e44:	230c      	movs	r3, #12
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e4c:	b01d      	add	sp, #116	@ 0x74
 8000e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e52:	2340      	movs	r3, #64	@ 0x40
 8000e54:	616b      	str	r3, [r5, #20]
 8000e56:	2300      	movs	r3, #0
 8000e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000e60:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e64:	2330      	movs	r3, #48	@ 0x30
 8000e66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001004 <_svfiprintf_r+0x1e4>
 8000e6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000e6e:	f04f 0901 	mov.w	r9, #1
 8000e72:	4623      	mov	r3, r4
 8000e74:	469a      	mov	sl, r3
 8000e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e7a:	b10a      	cbz	r2, 8000e80 <_svfiprintf_r+0x60>
 8000e7c:	2a25      	cmp	r2, #37	@ 0x25
 8000e7e:	d1f9      	bne.n	8000e74 <_svfiprintf_r+0x54>
 8000e80:	ebba 0b04 	subs.w	fp, sl, r4
 8000e84:	d00b      	beq.n	8000e9e <_svfiprintf_r+0x7e>
 8000e86:	465b      	mov	r3, fp
 8000e88:	4622      	mov	r2, r4
 8000e8a:	4629      	mov	r1, r5
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	f7ff ff6b 	bl	8000d68 <__ssputs_r>
 8000e92:	3001      	adds	r0, #1
 8000e94:	f000 80a7 	beq.w	8000fe6 <_svfiprintf_r+0x1c6>
 8000e98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000e9a:	445a      	add	r2, fp
 8000e9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 809f 	beq.w	8000fe6 <_svfiprintf_r+0x1c6>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000eb2:	f10a 0a01 	add.w	sl, sl, #1
 8000eb6:	9304      	str	r3, [sp, #16]
 8000eb8:	9307      	str	r3, [sp, #28]
 8000eba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ebe:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ec0:	4654      	mov	r4, sl
 8000ec2:	2205      	movs	r2, #5
 8000ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ec8:	484e      	ldr	r0, [pc, #312]	@ (8001004 <_svfiprintf_r+0x1e4>)
 8000eca:	f7ff f989 	bl	80001e0 <memchr>
 8000ece:	9a04      	ldr	r2, [sp, #16]
 8000ed0:	b9d8      	cbnz	r0, 8000f0a <_svfiprintf_r+0xea>
 8000ed2:	06d0      	lsls	r0, r2, #27
 8000ed4:	bf44      	itt	mi
 8000ed6:	2320      	movmi	r3, #32
 8000ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000edc:	0711      	lsls	r1, r2, #28
 8000ede:	bf44      	itt	mi
 8000ee0:	232b      	movmi	r3, #43	@ 0x2b
 8000ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8000eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8000eec:	d015      	beq.n	8000f1a <_svfiprintf_r+0xfa>
 8000eee:	9a07      	ldr	r2, [sp, #28]
 8000ef0:	4654      	mov	r4, sl
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f04f 0c0a 	mov.w	ip, #10
 8000ef8:	4621      	mov	r1, r4
 8000efa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000efe:	3b30      	subs	r3, #48	@ 0x30
 8000f00:	2b09      	cmp	r3, #9
 8000f02:	d94b      	bls.n	8000f9c <_svfiprintf_r+0x17c>
 8000f04:	b1b0      	cbz	r0, 8000f34 <_svfiprintf_r+0x114>
 8000f06:	9207      	str	r2, [sp, #28]
 8000f08:	e014      	b.n	8000f34 <_svfiprintf_r+0x114>
 8000f0a:	eba0 0308 	sub.w	r3, r0, r8
 8000f0e:	fa09 f303 	lsl.w	r3, r9, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	9304      	str	r3, [sp, #16]
 8000f16:	46a2      	mov	sl, r4
 8000f18:	e7d2      	b.n	8000ec0 <_svfiprintf_r+0xa0>
 8000f1a:	9b03      	ldr	r3, [sp, #12]
 8000f1c:	1d19      	adds	r1, r3, #4
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	9103      	str	r1, [sp, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	bfbb      	ittet	lt
 8000f26:	425b      	neglt	r3, r3
 8000f28:	f042 0202 	orrlt.w	r2, r2, #2
 8000f2c:	9307      	strge	r3, [sp, #28]
 8000f2e:	9307      	strlt	r3, [sp, #28]
 8000f30:	bfb8      	it	lt
 8000f32:	9204      	strlt	r2, [sp, #16]
 8000f34:	7823      	ldrb	r3, [r4, #0]
 8000f36:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f38:	d10a      	bne.n	8000f50 <_svfiprintf_r+0x130>
 8000f3a:	7863      	ldrb	r3, [r4, #1]
 8000f3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f3e:	d132      	bne.n	8000fa6 <_svfiprintf_r+0x186>
 8000f40:	9b03      	ldr	r3, [sp, #12]
 8000f42:	1d1a      	adds	r2, r3, #4
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	9203      	str	r2, [sp, #12]
 8000f48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000f4c:	3402      	adds	r4, #2
 8000f4e:	9305      	str	r3, [sp, #20]
 8000f50:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001008 <_svfiprintf_r+0x1e8>
 8000f54:	7821      	ldrb	r1, [r4, #0]
 8000f56:	2203      	movs	r2, #3
 8000f58:	4650      	mov	r0, sl
 8000f5a:	f7ff f941 	bl	80001e0 <memchr>
 8000f5e:	b138      	cbz	r0, 8000f70 <_svfiprintf_r+0x150>
 8000f60:	9b04      	ldr	r3, [sp, #16]
 8000f62:	eba0 000a 	sub.w	r0, r0, sl
 8000f66:	2240      	movs	r2, #64	@ 0x40
 8000f68:	4082      	lsls	r2, r0
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	3401      	adds	r4, #1
 8000f6e:	9304      	str	r3, [sp, #16]
 8000f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f74:	4825      	ldr	r0, [pc, #148]	@ (800100c <_svfiprintf_r+0x1ec>)
 8000f76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000f7a:	2206      	movs	r2, #6
 8000f7c:	f7ff f930 	bl	80001e0 <memchr>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d036      	beq.n	8000ff2 <_svfiprintf_r+0x1d2>
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <_svfiprintf_r+0x1f0>)
 8000f86:	bb1b      	cbnz	r3, 8000fd0 <_svfiprintf_r+0x1b0>
 8000f88:	9b03      	ldr	r3, [sp, #12]
 8000f8a:	3307      	adds	r3, #7
 8000f8c:	f023 0307 	bic.w	r3, r3, #7
 8000f90:	3308      	adds	r3, #8
 8000f92:	9303      	str	r3, [sp, #12]
 8000f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000f96:	4433      	add	r3, r6
 8000f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f9a:	e76a      	b.n	8000e72 <_svfiprintf_r+0x52>
 8000f9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000fa0:	460c      	mov	r4, r1
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	e7a8      	b.n	8000ef8 <_svfiprintf_r+0xd8>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	3401      	adds	r4, #1
 8000faa:	9305      	str	r3, [sp, #20]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f04f 0c0a 	mov.w	ip, #10
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fb8:	3a30      	subs	r2, #48	@ 0x30
 8000fba:	2a09      	cmp	r2, #9
 8000fbc:	d903      	bls.n	8000fc6 <_svfiprintf_r+0x1a6>
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0c6      	beq.n	8000f50 <_svfiprintf_r+0x130>
 8000fc2:	9105      	str	r1, [sp, #20]
 8000fc4:	e7c4      	b.n	8000f50 <_svfiprintf_r+0x130>
 8000fc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8000fca:	4604      	mov	r4, r0
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e7f0      	b.n	8000fb2 <_svfiprintf_r+0x192>
 8000fd0:	ab03      	add	r3, sp, #12
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	462a      	mov	r2, r5
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <_svfiprintf_r+0x1f4>)
 8000fd8:	a904      	add	r1, sp, #16
 8000fda:	4638      	mov	r0, r7
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	1c42      	adds	r2, r0, #1
 8000fe2:	4606      	mov	r6, r0
 8000fe4:	d1d6      	bne.n	8000f94 <_svfiprintf_r+0x174>
 8000fe6:	89ab      	ldrh	r3, [r5, #12]
 8000fe8:	065b      	lsls	r3, r3, #25
 8000fea:	f53f af2d 	bmi.w	8000e48 <_svfiprintf_r+0x28>
 8000fee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ff0:	e72c      	b.n	8000e4c <_svfiprintf_r+0x2c>
 8000ff2:	ab03      	add	r3, sp, #12
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	462a      	mov	r2, r5
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <_svfiprintf_r+0x1f4>)
 8000ffa:	a904      	add	r1, sp, #16
 8000ffc:	4638      	mov	r0, r7
 8000ffe:	f000 fa45 	bl	800148c <_printf_i>
 8001002:	e7ed      	b.n	8000fe0 <_svfiprintf_r+0x1c0>
 8001004:	08001dd4 	.word	0x08001dd4
 8001008:	08001dda 	.word	0x08001dda
 800100c:	08001dde 	.word	0x08001dde
 8001010:	00000000 	.word	0x00000000
 8001014:	08000d69 	.word	0x08000d69

08001018 <_sungetc_r>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	1c4b      	adds	r3, r1, #1
 800101c:	4614      	mov	r4, r2
 800101e:	d103      	bne.n	8001028 <_sungetc_r+0x10>
 8001020:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001024:	4628      	mov	r0, r5
 8001026:	bd38      	pop	{r3, r4, r5, pc}
 8001028:	8993      	ldrh	r3, [r2, #12]
 800102a:	f023 0320 	bic.w	r3, r3, #32
 800102e:	8193      	strh	r3, [r2, #12]
 8001030:	6853      	ldr	r3, [r2, #4]
 8001032:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001034:	b2cd      	uxtb	r5, r1
 8001036:	b18a      	cbz	r2, 800105c <_sungetc_r+0x44>
 8001038:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800103a:	429a      	cmp	r2, r3
 800103c:	dd08      	ble.n	8001050 <_sungetc_r+0x38>
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	1e5a      	subs	r2, r3, #1
 8001042:	6022      	str	r2, [r4, #0]
 8001044:	f803 5c01 	strb.w	r5, [r3, #-1]
 8001048:	6863      	ldr	r3, [r4, #4]
 800104a:	3301      	adds	r3, #1
 800104c:	6063      	str	r3, [r4, #4]
 800104e:	e7e9      	b.n	8001024 <_sungetc_r+0xc>
 8001050:	4621      	mov	r1, r4
 8001052:	f000 fcc2 	bl	80019da <__submore>
 8001056:	2800      	cmp	r0, #0
 8001058:	d0f1      	beq.n	800103e <_sungetc_r+0x26>
 800105a:	e7e1      	b.n	8001020 <_sungetc_r+0x8>
 800105c:	6921      	ldr	r1, [r4, #16]
 800105e:	6822      	ldr	r2, [r4, #0]
 8001060:	b141      	cbz	r1, 8001074 <_sungetc_r+0x5c>
 8001062:	4291      	cmp	r1, r2
 8001064:	d206      	bcs.n	8001074 <_sungetc_r+0x5c>
 8001066:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800106a:	42a9      	cmp	r1, r5
 800106c:	d102      	bne.n	8001074 <_sungetc_r+0x5c>
 800106e:	3a01      	subs	r2, #1
 8001070:	6022      	str	r2, [r4, #0]
 8001072:	e7ea      	b.n	800104a <_sungetc_r+0x32>
 8001074:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8001078:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800107c:	6363      	str	r3, [r4, #52]	@ 0x34
 800107e:	2303      	movs	r3, #3
 8001080:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001082:	4623      	mov	r3, r4
 8001084:	f803 5f46 	strb.w	r5, [r3, #70]!
 8001088:	6023      	str	r3, [r4, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	e7de      	b.n	800104c <_sungetc_r+0x34>

0800108e <__ssrefill_r>:
 800108e:	b510      	push	{r4, lr}
 8001090:	460c      	mov	r4, r1
 8001092:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8001094:	b169      	cbz	r1, 80010b2 <__ssrefill_r+0x24>
 8001096:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800109a:	4299      	cmp	r1, r3
 800109c:	d001      	beq.n	80010a2 <__ssrefill_r+0x14>
 800109e:	f7ff fd6b 	bl	8000b78 <_free_r>
 80010a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010a4:	6063      	str	r3, [r4, #4]
 80010a6:	2000      	movs	r0, #0
 80010a8:	6360      	str	r0, [r4, #52]	@ 0x34
 80010aa:	b113      	cbz	r3, 80010b2 <__ssrefill_r+0x24>
 80010ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80010ae:	6023      	str	r3, [r4, #0]
 80010b0:	bd10      	pop	{r4, pc}
 80010b2:	6923      	ldr	r3, [r4, #16]
 80010b4:	6023      	str	r3, [r4, #0]
 80010b6:	2300      	movs	r3, #0
 80010b8:	6063      	str	r3, [r4, #4]
 80010ba:	89a3      	ldrh	r3, [r4, #12]
 80010bc:	f043 0320 	orr.w	r3, r3, #32
 80010c0:	81a3      	strh	r3, [r4, #12]
 80010c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010c6:	e7f3      	b.n	80010b0 <__ssrefill_r+0x22>

080010c8 <__ssvfiscanf_r>:
 80010c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010cc:	460c      	mov	r4, r1
 80010ce:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80010d2:	2100      	movs	r1, #0
 80010d4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80010d8:	49a5      	ldr	r1, [pc, #660]	@ (8001370 <__ssvfiscanf_r+0x2a8>)
 80010da:	91a0      	str	r1, [sp, #640]	@ 0x280
 80010dc:	f10d 0804 	add.w	r8, sp, #4
 80010e0:	49a4      	ldr	r1, [pc, #656]	@ (8001374 <__ssvfiscanf_r+0x2ac>)
 80010e2:	4fa5      	ldr	r7, [pc, #660]	@ (8001378 <__ssvfiscanf_r+0x2b0>)
 80010e4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80010e8:	4606      	mov	r6, r0
 80010ea:	91a1      	str	r1, [sp, #644]	@ 0x284
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	7813      	ldrb	r3, [r2, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 8158 	beq.w	80013a6 <__ssvfiscanf_r+0x2de>
 80010f6:	5cf9      	ldrb	r1, [r7, r3]
 80010f8:	f011 0108 	ands.w	r1, r1, #8
 80010fc:	f102 0501 	add.w	r5, r2, #1
 8001100:	d019      	beq.n	8001136 <__ssvfiscanf_r+0x6e>
 8001102:	6863      	ldr	r3, [r4, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	dd0f      	ble.n	8001128 <__ssvfiscanf_r+0x60>
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	5cba      	ldrb	r2, [r7, r2]
 800110e:	0712      	lsls	r2, r2, #28
 8001110:	d401      	bmi.n	8001116 <__ssvfiscanf_r+0x4e>
 8001112:	462a      	mov	r2, r5
 8001114:	e7eb      	b.n	80010ee <__ssvfiscanf_r+0x26>
 8001116:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8001118:	3201      	adds	r2, #1
 800111a:	9245      	str	r2, [sp, #276]	@ 0x114
 800111c:	6862      	ldr	r2, [r4, #4]
 800111e:	3301      	adds	r3, #1
 8001120:	3a01      	subs	r2, #1
 8001122:	6062      	str	r2, [r4, #4]
 8001124:	6023      	str	r3, [r4, #0]
 8001126:	e7ec      	b.n	8001102 <__ssvfiscanf_r+0x3a>
 8001128:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800112a:	4621      	mov	r1, r4
 800112c:	4630      	mov	r0, r6
 800112e:	4798      	blx	r3
 8001130:	2800      	cmp	r0, #0
 8001132:	d0e9      	beq.n	8001108 <__ssvfiscanf_r+0x40>
 8001134:	e7ed      	b.n	8001112 <__ssvfiscanf_r+0x4a>
 8001136:	2b25      	cmp	r3, #37	@ 0x25
 8001138:	d012      	beq.n	8001160 <__ssvfiscanf_r+0x98>
 800113a:	4699      	mov	r9, r3
 800113c:	6863      	ldr	r3, [r4, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	f340 8093 	ble.w	800126a <__ssvfiscanf_r+0x1a2>
 8001144:	6822      	ldr	r2, [r4, #0]
 8001146:	7813      	ldrb	r3, [r2, #0]
 8001148:	454b      	cmp	r3, r9
 800114a:	f040 812c 	bne.w	80013a6 <__ssvfiscanf_r+0x2de>
 800114e:	6863      	ldr	r3, [r4, #4]
 8001150:	3b01      	subs	r3, #1
 8001152:	6063      	str	r3, [r4, #4]
 8001154:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8001156:	3201      	adds	r2, #1
 8001158:	3301      	adds	r3, #1
 800115a:	6022      	str	r2, [r4, #0]
 800115c:	9345      	str	r3, [sp, #276]	@ 0x114
 800115e:	e7d8      	b.n	8001112 <__ssvfiscanf_r+0x4a>
 8001160:	9141      	str	r1, [sp, #260]	@ 0x104
 8001162:	9143      	str	r1, [sp, #268]	@ 0x10c
 8001164:	7853      	ldrb	r3, [r2, #1]
 8001166:	2b2a      	cmp	r3, #42	@ 0x2a
 8001168:	bf02      	ittt	eq
 800116a:	2310      	moveq	r3, #16
 800116c:	1c95      	addeq	r5, r2, #2
 800116e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8001170:	220a      	movs	r2, #10
 8001172:	46a9      	mov	r9, r5
 8001174:	f819 1b01 	ldrb.w	r1, [r9], #1
 8001178:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800117c:	2b09      	cmp	r3, #9
 800117e:	d91e      	bls.n	80011be <__ssvfiscanf_r+0xf6>
 8001180:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800137c <__ssvfiscanf_r+0x2b4>
 8001184:	2203      	movs	r2, #3
 8001186:	4650      	mov	r0, sl
 8001188:	f7ff f82a 	bl	80001e0 <memchr>
 800118c:	b138      	cbz	r0, 800119e <__ssvfiscanf_r+0xd6>
 800118e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001190:	eba0 000a 	sub.w	r0, r0, sl
 8001194:	2301      	movs	r3, #1
 8001196:	4083      	lsls	r3, r0
 8001198:	4313      	orrs	r3, r2
 800119a:	9341      	str	r3, [sp, #260]	@ 0x104
 800119c:	464d      	mov	r5, r9
 800119e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80011a2:	2b78      	cmp	r3, #120	@ 0x78
 80011a4:	d806      	bhi.n	80011b4 <__ssvfiscanf_r+0xec>
 80011a6:	2b57      	cmp	r3, #87	@ 0x57
 80011a8:	d810      	bhi.n	80011cc <__ssvfiscanf_r+0x104>
 80011aa:	2b25      	cmp	r3, #37	@ 0x25
 80011ac:	d0c5      	beq.n	800113a <__ssvfiscanf_r+0x72>
 80011ae:	d857      	bhi.n	8001260 <__ssvfiscanf_r+0x198>
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d065      	beq.n	8001280 <__ssvfiscanf_r+0x1b8>
 80011b4:	2303      	movs	r3, #3
 80011b6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80011b8:	230a      	movs	r3, #10
 80011ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80011bc:	e078      	b.n	80012b0 <__ssvfiscanf_r+0x1e8>
 80011be:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80011c0:	fb02 1103 	mla	r1, r2, r3, r1
 80011c4:	3930      	subs	r1, #48	@ 0x30
 80011c6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80011c8:	464d      	mov	r5, r9
 80011ca:	e7d2      	b.n	8001172 <__ssvfiscanf_r+0xaa>
 80011cc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80011d0:	2a20      	cmp	r2, #32
 80011d2:	d8ef      	bhi.n	80011b4 <__ssvfiscanf_r+0xec>
 80011d4:	a101      	add	r1, pc, #4	@ (adr r1, 80011dc <__ssvfiscanf_r+0x114>)
 80011d6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80011da:	bf00      	nop
 80011dc:	0800128f 	.word	0x0800128f
 80011e0:	080011b5 	.word	0x080011b5
 80011e4:	080011b5 	.word	0x080011b5
 80011e8:	080012e9 	.word	0x080012e9
 80011ec:	080011b5 	.word	0x080011b5
 80011f0:	080011b5 	.word	0x080011b5
 80011f4:	080011b5 	.word	0x080011b5
 80011f8:	080011b5 	.word	0x080011b5
 80011fc:	080011b5 	.word	0x080011b5
 8001200:	080011b5 	.word	0x080011b5
 8001204:	080011b5 	.word	0x080011b5
 8001208:	080012ff 	.word	0x080012ff
 800120c:	080012e5 	.word	0x080012e5
 8001210:	08001267 	.word	0x08001267
 8001214:	08001267 	.word	0x08001267
 8001218:	08001267 	.word	0x08001267
 800121c:	080011b5 	.word	0x080011b5
 8001220:	080012a1 	.word	0x080012a1
 8001224:	080011b5 	.word	0x080011b5
 8001228:	080011b5 	.word	0x080011b5
 800122c:	080011b5 	.word	0x080011b5
 8001230:	080011b5 	.word	0x080011b5
 8001234:	0800130f 	.word	0x0800130f
 8001238:	080012a9 	.word	0x080012a9
 800123c:	08001287 	.word	0x08001287
 8001240:	080011b5 	.word	0x080011b5
 8001244:	080011b5 	.word	0x080011b5
 8001248:	0800130b 	.word	0x0800130b
 800124c:	080011b5 	.word	0x080011b5
 8001250:	080012e5 	.word	0x080012e5
 8001254:	080011b5 	.word	0x080011b5
 8001258:	080011b5 	.word	0x080011b5
 800125c:	0800128f 	.word	0x0800128f
 8001260:	3b45      	subs	r3, #69	@ 0x45
 8001262:	2b02      	cmp	r3, #2
 8001264:	d8a6      	bhi.n	80011b4 <__ssvfiscanf_r+0xec>
 8001266:	2305      	movs	r3, #5
 8001268:	e021      	b.n	80012ae <__ssvfiscanf_r+0x1e6>
 800126a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800126c:	4621      	mov	r1, r4
 800126e:	4630      	mov	r0, r6
 8001270:	4798      	blx	r3
 8001272:	2800      	cmp	r0, #0
 8001274:	f43f af66 	beq.w	8001144 <__ssvfiscanf_r+0x7c>
 8001278:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800127a:	2800      	cmp	r0, #0
 800127c:	f040 808b 	bne.w	8001396 <__ssvfiscanf_r+0x2ce>
 8001280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001284:	e08b      	b.n	800139e <__ssvfiscanf_r+0x2d6>
 8001286:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001288:	f042 0220 	orr.w	r2, r2, #32
 800128c:	9241      	str	r2, [sp, #260]	@ 0x104
 800128e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001294:	9241      	str	r2, [sp, #260]	@ 0x104
 8001296:	2210      	movs	r2, #16
 8001298:	2b6e      	cmp	r3, #110	@ 0x6e
 800129a:	9242      	str	r2, [sp, #264]	@ 0x108
 800129c:	d902      	bls.n	80012a4 <__ssvfiscanf_r+0x1dc>
 800129e:	e005      	b.n	80012ac <__ssvfiscanf_r+0x1e4>
 80012a0:	2300      	movs	r3, #0
 80012a2:	9342      	str	r3, [sp, #264]	@ 0x108
 80012a4:	2303      	movs	r3, #3
 80012a6:	e002      	b.n	80012ae <__ssvfiscanf_r+0x1e6>
 80012a8:	2308      	movs	r3, #8
 80012aa:	9342      	str	r3, [sp, #264]	@ 0x108
 80012ac:	2304      	movs	r3, #4
 80012ae:	9347      	str	r3, [sp, #284]	@ 0x11c
 80012b0:	6863      	ldr	r3, [r4, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	dd39      	ble.n	800132a <__ssvfiscanf_r+0x262>
 80012b6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80012b8:	0659      	lsls	r1, r3, #25
 80012ba:	d404      	bmi.n	80012c6 <__ssvfiscanf_r+0x1fe>
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	5cba      	ldrb	r2, [r7, r2]
 80012c2:	0712      	lsls	r2, r2, #28
 80012c4:	d438      	bmi.n	8001338 <__ssvfiscanf_r+0x270>
 80012c6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	dc47      	bgt.n	800135c <__ssvfiscanf_r+0x294>
 80012cc:	466b      	mov	r3, sp
 80012ce:	4622      	mov	r2, r4
 80012d0:	a941      	add	r1, sp, #260	@ 0x104
 80012d2:	4630      	mov	r0, r6
 80012d4:	f000 f9fa 	bl	80016cc <_scanf_chars>
 80012d8:	2801      	cmp	r0, #1
 80012da:	d064      	beq.n	80013a6 <__ssvfiscanf_r+0x2de>
 80012dc:	2802      	cmp	r0, #2
 80012de:	f47f af18 	bne.w	8001112 <__ssvfiscanf_r+0x4a>
 80012e2:	e7c9      	b.n	8001278 <__ssvfiscanf_r+0x1b0>
 80012e4:	220a      	movs	r2, #10
 80012e6:	e7d7      	b.n	8001298 <__ssvfiscanf_r+0x1d0>
 80012e8:	4629      	mov	r1, r5
 80012ea:	4640      	mov	r0, r8
 80012ec:	f000 fb3c 	bl	8001968 <__sccl>
 80012f0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80012f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012f6:	9341      	str	r3, [sp, #260]	@ 0x104
 80012f8:	4605      	mov	r5, r0
 80012fa:	2301      	movs	r3, #1
 80012fc:	e7d7      	b.n	80012ae <__ssvfiscanf_r+0x1e6>
 80012fe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8001300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001304:	9341      	str	r3, [sp, #260]	@ 0x104
 8001306:	2300      	movs	r3, #0
 8001308:	e7d1      	b.n	80012ae <__ssvfiscanf_r+0x1e6>
 800130a:	2302      	movs	r3, #2
 800130c:	e7cf      	b.n	80012ae <__ssvfiscanf_r+0x1e6>
 800130e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8001310:	06c3      	lsls	r3, r0, #27
 8001312:	f53f aefe 	bmi.w	8001112 <__ssvfiscanf_r+0x4a>
 8001316:	9b00      	ldr	r3, [sp, #0]
 8001318:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800131a:	1d19      	adds	r1, r3, #4
 800131c:	9100      	str	r1, [sp, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	07c0      	lsls	r0, r0, #31
 8001322:	bf4c      	ite	mi
 8001324:	801a      	strhmi	r2, [r3, #0]
 8001326:	601a      	strpl	r2, [r3, #0]
 8001328:	e6f3      	b.n	8001112 <__ssvfiscanf_r+0x4a>
 800132a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800132c:	4621      	mov	r1, r4
 800132e:	4630      	mov	r0, r6
 8001330:	4798      	blx	r3
 8001332:	2800      	cmp	r0, #0
 8001334:	d0bf      	beq.n	80012b6 <__ssvfiscanf_r+0x1ee>
 8001336:	e79f      	b.n	8001278 <__ssvfiscanf_r+0x1b0>
 8001338:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800133a:	3201      	adds	r2, #1
 800133c:	9245      	str	r2, [sp, #276]	@ 0x114
 800133e:	6862      	ldr	r2, [r4, #4]
 8001340:	3a01      	subs	r2, #1
 8001342:	2a00      	cmp	r2, #0
 8001344:	6062      	str	r2, [r4, #4]
 8001346:	dd02      	ble.n	800134e <__ssvfiscanf_r+0x286>
 8001348:	3301      	adds	r3, #1
 800134a:	6023      	str	r3, [r4, #0]
 800134c:	e7b6      	b.n	80012bc <__ssvfiscanf_r+0x1f4>
 800134e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001350:	4621      	mov	r1, r4
 8001352:	4630      	mov	r0, r6
 8001354:	4798      	blx	r3
 8001356:	2800      	cmp	r0, #0
 8001358:	d0b0      	beq.n	80012bc <__ssvfiscanf_r+0x1f4>
 800135a:	e78d      	b.n	8001278 <__ssvfiscanf_r+0x1b0>
 800135c:	2b04      	cmp	r3, #4
 800135e:	dc0f      	bgt.n	8001380 <__ssvfiscanf_r+0x2b8>
 8001360:	466b      	mov	r3, sp
 8001362:	4622      	mov	r2, r4
 8001364:	a941      	add	r1, sp, #260	@ 0x104
 8001366:	4630      	mov	r0, r6
 8001368:	f000 fa0a 	bl	8001780 <_scanf_i>
 800136c:	e7b4      	b.n	80012d8 <__ssvfiscanf_r+0x210>
 800136e:	bf00      	nop
 8001370:	08001019 	.word	0x08001019
 8001374:	0800108f 	.word	0x0800108f
 8001378:	08001e23 	.word	0x08001e23
 800137c:	08001dda 	.word	0x08001dda
 8001380:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <__ssvfiscanf_r+0x2e4>)
 8001382:	2b00      	cmp	r3, #0
 8001384:	f43f aec5 	beq.w	8001112 <__ssvfiscanf_r+0x4a>
 8001388:	466b      	mov	r3, sp
 800138a:	4622      	mov	r2, r4
 800138c:	a941      	add	r1, sp, #260	@ 0x104
 800138e:	4630      	mov	r0, r6
 8001390:	f3af 8000 	nop.w
 8001394:	e7a0      	b.n	80012d8 <__ssvfiscanf_r+0x210>
 8001396:	89a3      	ldrh	r3, [r4, #12]
 8001398:	065b      	lsls	r3, r3, #25
 800139a:	f53f af71 	bmi.w	8001280 <__ssvfiscanf_r+0x1b8>
 800139e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80013a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80013a8:	e7f9      	b.n	800139e <__ssvfiscanf_r+0x2d6>
 80013aa:	bf00      	nop
 80013ac:	00000000 	.word	0x00000000

080013b0 <_printf_common>:
 80013b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013b4:	4616      	mov	r6, r2
 80013b6:	4698      	mov	r8, r3
 80013b8:	688a      	ldr	r2, [r1, #8]
 80013ba:	690b      	ldr	r3, [r1, #16]
 80013bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80013c0:	4293      	cmp	r3, r2
 80013c2:	bfb8      	it	lt
 80013c4:	4613      	movlt	r3, r2
 80013c6:	6033      	str	r3, [r6, #0]
 80013c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80013cc:	4607      	mov	r7, r0
 80013ce:	460c      	mov	r4, r1
 80013d0:	b10a      	cbz	r2, 80013d6 <_printf_common+0x26>
 80013d2:	3301      	adds	r3, #1
 80013d4:	6033      	str	r3, [r6, #0]
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	0699      	lsls	r1, r3, #26
 80013da:	bf42      	ittt	mi
 80013dc:	6833      	ldrmi	r3, [r6, #0]
 80013de:	3302      	addmi	r3, #2
 80013e0:	6033      	strmi	r3, [r6, #0]
 80013e2:	6825      	ldr	r5, [r4, #0]
 80013e4:	f015 0506 	ands.w	r5, r5, #6
 80013e8:	d106      	bne.n	80013f8 <_printf_common+0x48>
 80013ea:	f104 0a19 	add.w	sl, r4, #25
 80013ee:	68e3      	ldr	r3, [r4, #12]
 80013f0:	6832      	ldr	r2, [r6, #0]
 80013f2:	1a9b      	subs	r3, r3, r2
 80013f4:	42ab      	cmp	r3, r5
 80013f6:	dc26      	bgt.n	8001446 <_printf_common+0x96>
 80013f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80013fc:	6822      	ldr	r2, [r4, #0]
 80013fe:	3b00      	subs	r3, #0
 8001400:	bf18      	it	ne
 8001402:	2301      	movne	r3, #1
 8001404:	0692      	lsls	r2, r2, #26
 8001406:	d42b      	bmi.n	8001460 <_printf_common+0xb0>
 8001408:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800140c:	4641      	mov	r1, r8
 800140e:	4638      	mov	r0, r7
 8001410:	47c8      	blx	r9
 8001412:	3001      	adds	r0, #1
 8001414:	d01e      	beq.n	8001454 <_printf_common+0xa4>
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	6922      	ldr	r2, [r4, #16]
 800141a:	f003 0306 	and.w	r3, r3, #6
 800141e:	2b04      	cmp	r3, #4
 8001420:	bf02      	ittt	eq
 8001422:	68e5      	ldreq	r5, [r4, #12]
 8001424:	6833      	ldreq	r3, [r6, #0]
 8001426:	1aed      	subeq	r5, r5, r3
 8001428:	68a3      	ldr	r3, [r4, #8]
 800142a:	bf0c      	ite	eq
 800142c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001430:	2500      	movne	r5, #0
 8001432:	4293      	cmp	r3, r2
 8001434:	bfc4      	itt	gt
 8001436:	1a9b      	subgt	r3, r3, r2
 8001438:	18ed      	addgt	r5, r5, r3
 800143a:	2600      	movs	r6, #0
 800143c:	341a      	adds	r4, #26
 800143e:	42b5      	cmp	r5, r6
 8001440:	d11a      	bne.n	8001478 <_printf_common+0xc8>
 8001442:	2000      	movs	r0, #0
 8001444:	e008      	b.n	8001458 <_printf_common+0xa8>
 8001446:	2301      	movs	r3, #1
 8001448:	4652      	mov	r2, sl
 800144a:	4641      	mov	r1, r8
 800144c:	4638      	mov	r0, r7
 800144e:	47c8      	blx	r9
 8001450:	3001      	adds	r0, #1
 8001452:	d103      	bne.n	800145c <_printf_common+0xac>
 8001454:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800145c:	3501      	adds	r5, #1
 800145e:	e7c6      	b.n	80013ee <_printf_common+0x3e>
 8001460:	18e1      	adds	r1, r4, r3
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	2030      	movs	r0, #48	@ 0x30
 8001466:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800146a:	4422      	add	r2, r4
 800146c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001470:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001474:	3302      	adds	r3, #2
 8001476:	e7c7      	b.n	8001408 <_printf_common+0x58>
 8001478:	2301      	movs	r3, #1
 800147a:	4622      	mov	r2, r4
 800147c:	4641      	mov	r1, r8
 800147e:	4638      	mov	r0, r7
 8001480:	47c8      	blx	r9
 8001482:	3001      	adds	r0, #1
 8001484:	d0e6      	beq.n	8001454 <_printf_common+0xa4>
 8001486:	3601      	adds	r6, #1
 8001488:	e7d9      	b.n	800143e <_printf_common+0x8e>
	...

0800148c <_printf_i>:
 800148c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001490:	7e0f      	ldrb	r7, [r1, #24]
 8001492:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001494:	2f78      	cmp	r7, #120	@ 0x78
 8001496:	4691      	mov	r9, r2
 8001498:	4680      	mov	r8, r0
 800149a:	460c      	mov	r4, r1
 800149c:	469a      	mov	sl, r3
 800149e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80014a2:	d807      	bhi.n	80014b4 <_printf_i+0x28>
 80014a4:	2f62      	cmp	r7, #98	@ 0x62
 80014a6:	d80a      	bhi.n	80014be <_printf_i+0x32>
 80014a8:	2f00      	cmp	r7, #0
 80014aa:	f000 80d2 	beq.w	8001652 <_printf_i+0x1c6>
 80014ae:	2f58      	cmp	r7, #88	@ 0x58
 80014b0:	f000 80b9 	beq.w	8001626 <_printf_i+0x19a>
 80014b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80014bc:	e03a      	b.n	8001534 <_printf_i+0xa8>
 80014be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80014c2:	2b15      	cmp	r3, #21
 80014c4:	d8f6      	bhi.n	80014b4 <_printf_i+0x28>
 80014c6:	a101      	add	r1, pc, #4	@ (adr r1, 80014cc <_printf_i+0x40>)
 80014c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80014cc:	08001525 	.word	0x08001525
 80014d0:	08001539 	.word	0x08001539
 80014d4:	080014b5 	.word	0x080014b5
 80014d8:	080014b5 	.word	0x080014b5
 80014dc:	080014b5 	.word	0x080014b5
 80014e0:	080014b5 	.word	0x080014b5
 80014e4:	08001539 	.word	0x08001539
 80014e8:	080014b5 	.word	0x080014b5
 80014ec:	080014b5 	.word	0x080014b5
 80014f0:	080014b5 	.word	0x080014b5
 80014f4:	080014b5 	.word	0x080014b5
 80014f8:	08001639 	.word	0x08001639
 80014fc:	08001563 	.word	0x08001563
 8001500:	080015f3 	.word	0x080015f3
 8001504:	080014b5 	.word	0x080014b5
 8001508:	080014b5 	.word	0x080014b5
 800150c:	0800165b 	.word	0x0800165b
 8001510:	080014b5 	.word	0x080014b5
 8001514:	08001563 	.word	0x08001563
 8001518:	080014b5 	.word	0x080014b5
 800151c:	080014b5 	.word	0x080014b5
 8001520:	080015fb 	.word	0x080015fb
 8001524:	6833      	ldr	r3, [r6, #0]
 8001526:	1d1a      	adds	r2, r3, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6032      	str	r2, [r6, #0]
 800152c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001530:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001534:	2301      	movs	r3, #1
 8001536:	e09d      	b.n	8001674 <_printf_i+0x1e8>
 8001538:	6833      	ldr	r3, [r6, #0]
 800153a:	6820      	ldr	r0, [r4, #0]
 800153c:	1d19      	adds	r1, r3, #4
 800153e:	6031      	str	r1, [r6, #0]
 8001540:	0606      	lsls	r6, r0, #24
 8001542:	d501      	bpl.n	8001548 <_printf_i+0xbc>
 8001544:	681d      	ldr	r5, [r3, #0]
 8001546:	e003      	b.n	8001550 <_printf_i+0xc4>
 8001548:	0645      	lsls	r5, r0, #25
 800154a:	d5fb      	bpl.n	8001544 <_printf_i+0xb8>
 800154c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001550:	2d00      	cmp	r5, #0
 8001552:	da03      	bge.n	800155c <_printf_i+0xd0>
 8001554:	232d      	movs	r3, #45	@ 0x2d
 8001556:	426d      	negs	r5, r5
 8001558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800155c:	4859      	ldr	r0, [pc, #356]	@ (80016c4 <_printf_i+0x238>)
 800155e:	230a      	movs	r3, #10
 8001560:	e011      	b.n	8001586 <_printf_i+0xfa>
 8001562:	6821      	ldr	r1, [r4, #0]
 8001564:	6833      	ldr	r3, [r6, #0]
 8001566:	0608      	lsls	r0, r1, #24
 8001568:	f853 5b04 	ldr.w	r5, [r3], #4
 800156c:	d402      	bmi.n	8001574 <_printf_i+0xe8>
 800156e:	0649      	lsls	r1, r1, #25
 8001570:	bf48      	it	mi
 8001572:	b2ad      	uxthmi	r5, r5
 8001574:	2f6f      	cmp	r7, #111	@ 0x6f
 8001576:	4853      	ldr	r0, [pc, #332]	@ (80016c4 <_printf_i+0x238>)
 8001578:	6033      	str	r3, [r6, #0]
 800157a:	bf14      	ite	ne
 800157c:	230a      	movne	r3, #10
 800157e:	2308      	moveq	r3, #8
 8001580:	2100      	movs	r1, #0
 8001582:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001586:	6866      	ldr	r6, [r4, #4]
 8001588:	60a6      	str	r6, [r4, #8]
 800158a:	2e00      	cmp	r6, #0
 800158c:	bfa2      	ittt	ge
 800158e:	6821      	ldrge	r1, [r4, #0]
 8001590:	f021 0104 	bicge.w	r1, r1, #4
 8001594:	6021      	strge	r1, [r4, #0]
 8001596:	b90d      	cbnz	r5, 800159c <_printf_i+0x110>
 8001598:	2e00      	cmp	r6, #0
 800159a:	d04b      	beq.n	8001634 <_printf_i+0x1a8>
 800159c:	4616      	mov	r6, r2
 800159e:	fbb5 f1f3 	udiv	r1, r5, r3
 80015a2:	fb03 5711 	mls	r7, r3, r1, r5
 80015a6:	5dc7      	ldrb	r7, [r0, r7]
 80015a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80015ac:	462f      	mov	r7, r5
 80015ae:	42bb      	cmp	r3, r7
 80015b0:	460d      	mov	r5, r1
 80015b2:	d9f4      	bls.n	800159e <_printf_i+0x112>
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d10b      	bne.n	80015d0 <_printf_i+0x144>
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	07df      	lsls	r7, r3, #31
 80015bc:	d508      	bpl.n	80015d0 <_printf_i+0x144>
 80015be:	6923      	ldr	r3, [r4, #16]
 80015c0:	6861      	ldr	r1, [r4, #4]
 80015c2:	4299      	cmp	r1, r3
 80015c4:	bfde      	ittt	le
 80015c6:	2330      	movle	r3, #48	@ 0x30
 80015c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80015cc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80015d0:	1b92      	subs	r2, r2, r6
 80015d2:	6122      	str	r2, [r4, #16]
 80015d4:	f8cd a000 	str.w	sl, [sp]
 80015d8:	464b      	mov	r3, r9
 80015da:	aa03      	add	r2, sp, #12
 80015dc:	4621      	mov	r1, r4
 80015de:	4640      	mov	r0, r8
 80015e0:	f7ff fee6 	bl	80013b0 <_printf_common>
 80015e4:	3001      	adds	r0, #1
 80015e6:	d14a      	bne.n	800167e <_printf_i+0x1f2>
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015ec:	b004      	add	sp, #16
 80015ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	f043 0320 	orr.w	r3, r3, #32
 80015f8:	6023      	str	r3, [r4, #0]
 80015fa:	4833      	ldr	r0, [pc, #204]	@ (80016c8 <_printf_i+0x23c>)
 80015fc:	2778      	movs	r7, #120	@ 0x78
 80015fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	6831      	ldr	r1, [r6, #0]
 8001606:	061f      	lsls	r7, r3, #24
 8001608:	f851 5b04 	ldr.w	r5, [r1], #4
 800160c:	d402      	bmi.n	8001614 <_printf_i+0x188>
 800160e:	065f      	lsls	r7, r3, #25
 8001610:	bf48      	it	mi
 8001612:	b2ad      	uxthmi	r5, r5
 8001614:	6031      	str	r1, [r6, #0]
 8001616:	07d9      	lsls	r1, r3, #31
 8001618:	bf44      	itt	mi
 800161a:	f043 0320 	orrmi.w	r3, r3, #32
 800161e:	6023      	strmi	r3, [r4, #0]
 8001620:	b11d      	cbz	r5, 800162a <_printf_i+0x19e>
 8001622:	2310      	movs	r3, #16
 8001624:	e7ac      	b.n	8001580 <_printf_i+0xf4>
 8001626:	4827      	ldr	r0, [pc, #156]	@ (80016c4 <_printf_i+0x238>)
 8001628:	e7e9      	b.n	80015fe <_printf_i+0x172>
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	f023 0320 	bic.w	r3, r3, #32
 8001630:	6023      	str	r3, [r4, #0]
 8001632:	e7f6      	b.n	8001622 <_printf_i+0x196>
 8001634:	4616      	mov	r6, r2
 8001636:	e7bd      	b.n	80015b4 <_printf_i+0x128>
 8001638:	6833      	ldr	r3, [r6, #0]
 800163a:	6825      	ldr	r5, [r4, #0]
 800163c:	6961      	ldr	r1, [r4, #20]
 800163e:	1d18      	adds	r0, r3, #4
 8001640:	6030      	str	r0, [r6, #0]
 8001642:	062e      	lsls	r6, r5, #24
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	d501      	bpl.n	800164c <_printf_i+0x1c0>
 8001648:	6019      	str	r1, [r3, #0]
 800164a:	e002      	b.n	8001652 <_printf_i+0x1c6>
 800164c:	0668      	lsls	r0, r5, #25
 800164e:	d5fb      	bpl.n	8001648 <_printf_i+0x1bc>
 8001650:	8019      	strh	r1, [r3, #0]
 8001652:	2300      	movs	r3, #0
 8001654:	6123      	str	r3, [r4, #16]
 8001656:	4616      	mov	r6, r2
 8001658:	e7bc      	b.n	80015d4 <_printf_i+0x148>
 800165a:	6833      	ldr	r3, [r6, #0]
 800165c:	1d1a      	adds	r2, r3, #4
 800165e:	6032      	str	r2, [r6, #0]
 8001660:	681e      	ldr	r6, [r3, #0]
 8001662:	6862      	ldr	r2, [r4, #4]
 8001664:	2100      	movs	r1, #0
 8001666:	4630      	mov	r0, r6
 8001668:	f7fe fdba 	bl	80001e0 <memchr>
 800166c:	b108      	cbz	r0, 8001672 <_printf_i+0x1e6>
 800166e:	1b80      	subs	r0, r0, r6
 8001670:	6060      	str	r0, [r4, #4]
 8001672:	6863      	ldr	r3, [r4, #4]
 8001674:	6123      	str	r3, [r4, #16]
 8001676:	2300      	movs	r3, #0
 8001678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800167c:	e7aa      	b.n	80015d4 <_printf_i+0x148>
 800167e:	6923      	ldr	r3, [r4, #16]
 8001680:	4632      	mov	r2, r6
 8001682:	4649      	mov	r1, r9
 8001684:	4640      	mov	r0, r8
 8001686:	47d0      	blx	sl
 8001688:	3001      	adds	r0, #1
 800168a:	d0ad      	beq.n	80015e8 <_printf_i+0x15c>
 800168c:	6823      	ldr	r3, [r4, #0]
 800168e:	079b      	lsls	r3, r3, #30
 8001690:	d413      	bmi.n	80016ba <_printf_i+0x22e>
 8001692:	68e0      	ldr	r0, [r4, #12]
 8001694:	9b03      	ldr	r3, [sp, #12]
 8001696:	4298      	cmp	r0, r3
 8001698:	bfb8      	it	lt
 800169a:	4618      	movlt	r0, r3
 800169c:	e7a6      	b.n	80015ec <_printf_i+0x160>
 800169e:	2301      	movs	r3, #1
 80016a0:	4632      	mov	r2, r6
 80016a2:	4649      	mov	r1, r9
 80016a4:	4640      	mov	r0, r8
 80016a6:	47d0      	blx	sl
 80016a8:	3001      	adds	r0, #1
 80016aa:	d09d      	beq.n	80015e8 <_printf_i+0x15c>
 80016ac:	3501      	adds	r5, #1
 80016ae:	68e3      	ldr	r3, [r4, #12]
 80016b0:	9903      	ldr	r1, [sp, #12]
 80016b2:	1a5b      	subs	r3, r3, r1
 80016b4:	42ab      	cmp	r3, r5
 80016b6:	dcf2      	bgt.n	800169e <_printf_i+0x212>
 80016b8:	e7eb      	b.n	8001692 <_printf_i+0x206>
 80016ba:	2500      	movs	r5, #0
 80016bc:	f104 0619 	add.w	r6, r4, #25
 80016c0:	e7f5      	b.n	80016ae <_printf_i+0x222>
 80016c2:	bf00      	nop
 80016c4:	08001de5 	.word	0x08001de5
 80016c8:	08001df6 	.word	0x08001df6

080016cc <_scanf_chars>:
 80016cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016d0:	4615      	mov	r5, r2
 80016d2:	688a      	ldr	r2, [r1, #8]
 80016d4:	4680      	mov	r8, r0
 80016d6:	460c      	mov	r4, r1
 80016d8:	b932      	cbnz	r2, 80016e8 <_scanf_chars+0x1c>
 80016da:	698a      	ldr	r2, [r1, #24]
 80016dc:	2a00      	cmp	r2, #0
 80016de:	bf14      	ite	ne
 80016e0:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80016e4:	2201      	moveq	r2, #1
 80016e6:	608a      	str	r2, [r1, #8]
 80016e8:	6822      	ldr	r2, [r4, #0]
 80016ea:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800177c <_scanf_chars+0xb0>
 80016ee:	06d1      	lsls	r1, r2, #27
 80016f0:	bf5f      	itttt	pl
 80016f2:	681a      	ldrpl	r2, [r3, #0]
 80016f4:	1d11      	addpl	r1, r2, #4
 80016f6:	6019      	strpl	r1, [r3, #0]
 80016f8:	6816      	ldrpl	r6, [r2, #0]
 80016fa:	2700      	movs	r7, #0
 80016fc:	69a0      	ldr	r0, [r4, #24]
 80016fe:	b188      	cbz	r0, 8001724 <_scanf_chars+0x58>
 8001700:	2801      	cmp	r0, #1
 8001702:	d107      	bne.n	8001714 <_scanf_chars+0x48>
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	781a      	ldrb	r2, [r3, #0]
 8001708:	6963      	ldr	r3, [r4, #20]
 800170a:	5c9b      	ldrb	r3, [r3, r2]
 800170c:	b953      	cbnz	r3, 8001724 <_scanf_chars+0x58>
 800170e:	2f00      	cmp	r7, #0
 8001710:	d031      	beq.n	8001776 <_scanf_chars+0xaa>
 8001712:	e022      	b.n	800175a <_scanf_chars+0x8e>
 8001714:	2802      	cmp	r0, #2
 8001716:	d120      	bne.n	800175a <_scanf_chars+0x8e>
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8001720:	071b      	lsls	r3, r3, #28
 8001722:	d41a      	bmi.n	800175a <_scanf_chars+0x8e>
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	06da      	lsls	r2, r3, #27
 8001728:	bf5e      	ittt	pl
 800172a:	682b      	ldrpl	r3, [r5, #0]
 800172c:	781b      	ldrbpl	r3, [r3, #0]
 800172e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8001732:	682a      	ldr	r2, [r5, #0]
 8001734:	686b      	ldr	r3, [r5, #4]
 8001736:	3201      	adds	r2, #1
 8001738:	602a      	str	r2, [r5, #0]
 800173a:	68a2      	ldr	r2, [r4, #8]
 800173c:	3b01      	subs	r3, #1
 800173e:	3a01      	subs	r2, #1
 8001740:	606b      	str	r3, [r5, #4]
 8001742:	3701      	adds	r7, #1
 8001744:	60a2      	str	r2, [r4, #8]
 8001746:	b142      	cbz	r2, 800175a <_scanf_chars+0x8e>
 8001748:	2b00      	cmp	r3, #0
 800174a:	dcd7      	bgt.n	80016fc <_scanf_chars+0x30>
 800174c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8001750:	4629      	mov	r1, r5
 8001752:	4640      	mov	r0, r8
 8001754:	4798      	blx	r3
 8001756:	2800      	cmp	r0, #0
 8001758:	d0d0      	beq.n	80016fc <_scanf_chars+0x30>
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	f013 0310 	ands.w	r3, r3, #16
 8001760:	d105      	bne.n	800176e <_scanf_chars+0xa2>
 8001762:	68e2      	ldr	r2, [r4, #12]
 8001764:	3201      	adds	r2, #1
 8001766:	60e2      	str	r2, [r4, #12]
 8001768:	69a2      	ldr	r2, [r4, #24]
 800176a:	b102      	cbz	r2, 800176e <_scanf_chars+0xa2>
 800176c:	7033      	strb	r3, [r6, #0]
 800176e:	6923      	ldr	r3, [r4, #16]
 8001770:	443b      	add	r3, r7
 8001772:	6123      	str	r3, [r4, #16]
 8001774:	2000      	movs	r0, #0
 8001776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800177a:	bf00      	nop
 800177c:	08001e23 	.word	0x08001e23

08001780 <_scanf_i>:
 8001780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001784:	4698      	mov	r8, r3
 8001786:	4b74      	ldr	r3, [pc, #464]	@ (8001958 <_scanf_i+0x1d8>)
 8001788:	460c      	mov	r4, r1
 800178a:	4682      	mov	sl, r0
 800178c:	4616      	mov	r6, r2
 800178e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001792:	b087      	sub	sp, #28
 8001794:	ab03      	add	r3, sp, #12
 8001796:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800179a:	4b70      	ldr	r3, [pc, #448]	@ (800195c <_scanf_i+0x1dc>)
 800179c:	69a1      	ldr	r1, [r4, #24]
 800179e:	4a70      	ldr	r2, [pc, #448]	@ (8001960 <_scanf_i+0x1e0>)
 80017a0:	2903      	cmp	r1, #3
 80017a2:	bf08      	it	eq
 80017a4:	461a      	moveq	r2, r3
 80017a6:	68a3      	ldr	r3, [r4, #8]
 80017a8:	9201      	str	r2, [sp, #4]
 80017aa:	1e5a      	subs	r2, r3, #1
 80017ac:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80017b0:	bf88      	it	hi
 80017b2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80017b6:	4627      	mov	r7, r4
 80017b8:	bf82      	ittt	hi
 80017ba:	eb03 0905 	addhi.w	r9, r3, r5
 80017be:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80017c2:	60a3      	strhi	r3, [r4, #8]
 80017c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80017c8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80017cc:	bf98      	it	ls
 80017ce:	f04f 0900 	movls.w	r9, #0
 80017d2:	6023      	str	r3, [r4, #0]
 80017d4:	463d      	mov	r5, r7
 80017d6:	f04f 0b00 	mov.w	fp, #0
 80017da:	6831      	ldr	r1, [r6, #0]
 80017dc:	ab03      	add	r3, sp, #12
 80017de:	7809      	ldrb	r1, [r1, #0]
 80017e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80017e4:	2202      	movs	r2, #2
 80017e6:	f7fe fcfb 	bl	80001e0 <memchr>
 80017ea:	b328      	cbz	r0, 8001838 <_scanf_i+0xb8>
 80017ec:	f1bb 0f01 	cmp.w	fp, #1
 80017f0:	d159      	bne.n	80018a6 <_scanf_i+0x126>
 80017f2:	6862      	ldr	r2, [r4, #4]
 80017f4:	b92a      	cbnz	r2, 8001802 <_scanf_i+0x82>
 80017f6:	6822      	ldr	r2, [r4, #0]
 80017f8:	2108      	movs	r1, #8
 80017fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017fe:	6061      	str	r1, [r4, #4]
 8001800:	6022      	str	r2, [r4, #0]
 8001802:	6822      	ldr	r2, [r4, #0]
 8001804:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8001808:	6022      	str	r2, [r4, #0]
 800180a:	68a2      	ldr	r2, [r4, #8]
 800180c:	1e51      	subs	r1, r2, #1
 800180e:	60a1      	str	r1, [r4, #8]
 8001810:	b192      	cbz	r2, 8001838 <_scanf_i+0xb8>
 8001812:	6832      	ldr	r2, [r6, #0]
 8001814:	1c51      	adds	r1, r2, #1
 8001816:	6031      	str	r1, [r6, #0]
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	f805 2b01 	strb.w	r2, [r5], #1
 800181e:	6872      	ldr	r2, [r6, #4]
 8001820:	3a01      	subs	r2, #1
 8001822:	2a00      	cmp	r2, #0
 8001824:	6072      	str	r2, [r6, #4]
 8001826:	dc07      	bgt.n	8001838 <_scanf_i+0xb8>
 8001828:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800182c:	4631      	mov	r1, r6
 800182e:	4650      	mov	r0, sl
 8001830:	4790      	blx	r2
 8001832:	2800      	cmp	r0, #0
 8001834:	f040 8085 	bne.w	8001942 <_scanf_i+0x1c2>
 8001838:	f10b 0b01 	add.w	fp, fp, #1
 800183c:	f1bb 0f03 	cmp.w	fp, #3
 8001840:	d1cb      	bne.n	80017da <_scanf_i+0x5a>
 8001842:	6863      	ldr	r3, [r4, #4]
 8001844:	b90b      	cbnz	r3, 800184a <_scanf_i+0xca>
 8001846:	230a      	movs	r3, #10
 8001848:	6063      	str	r3, [r4, #4]
 800184a:	6863      	ldr	r3, [r4, #4]
 800184c:	4945      	ldr	r1, [pc, #276]	@ (8001964 <_scanf_i+0x1e4>)
 800184e:	6960      	ldr	r0, [r4, #20]
 8001850:	1ac9      	subs	r1, r1, r3
 8001852:	f000 f889 	bl	8001968 <__sccl>
 8001856:	f04f 0b00 	mov.w	fp, #0
 800185a:	68a3      	ldr	r3, [r4, #8]
 800185c:	6822      	ldr	r2, [r4, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d03d      	beq.n	80018de <_scanf_i+0x15e>
 8001862:	6831      	ldr	r1, [r6, #0]
 8001864:	6960      	ldr	r0, [r4, #20]
 8001866:	f891 c000 	ldrb.w	ip, [r1]
 800186a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800186e:	2800      	cmp	r0, #0
 8001870:	d035      	beq.n	80018de <_scanf_i+0x15e>
 8001872:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8001876:	d124      	bne.n	80018c2 <_scanf_i+0x142>
 8001878:	0510      	lsls	r0, r2, #20
 800187a:	d522      	bpl.n	80018c2 <_scanf_i+0x142>
 800187c:	f10b 0b01 	add.w	fp, fp, #1
 8001880:	f1b9 0f00 	cmp.w	r9, #0
 8001884:	d003      	beq.n	800188e <_scanf_i+0x10e>
 8001886:	3301      	adds	r3, #1
 8001888:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800188c:	60a3      	str	r3, [r4, #8]
 800188e:	6873      	ldr	r3, [r6, #4]
 8001890:	3b01      	subs	r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	6073      	str	r3, [r6, #4]
 8001896:	dd1b      	ble.n	80018d0 <_scanf_i+0x150>
 8001898:	6833      	ldr	r3, [r6, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	6033      	str	r3, [r6, #0]
 800189e:	68a3      	ldr	r3, [r4, #8]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	60a3      	str	r3, [r4, #8]
 80018a4:	e7d9      	b.n	800185a <_scanf_i+0xda>
 80018a6:	f1bb 0f02 	cmp.w	fp, #2
 80018aa:	d1ae      	bne.n	800180a <_scanf_i+0x8a>
 80018ac:	6822      	ldr	r2, [r4, #0]
 80018ae:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80018b2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80018b6:	d1bf      	bne.n	8001838 <_scanf_i+0xb8>
 80018b8:	2110      	movs	r1, #16
 80018ba:	6061      	str	r1, [r4, #4]
 80018bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018c0:	e7a2      	b.n	8001808 <_scanf_i+0x88>
 80018c2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80018c6:	6022      	str	r2, [r4, #0]
 80018c8:	780b      	ldrb	r3, [r1, #0]
 80018ca:	f805 3b01 	strb.w	r3, [r5], #1
 80018ce:	e7de      	b.n	800188e <_scanf_i+0x10e>
 80018d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80018d4:	4631      	mov	r1, r6
 80018d6:	4650      	mov	r0, sl
 80018d8:	4798      	blx	r3
 80018da:	2800      	cmp	r0, #0
 80018dc:	d0df      	beq.n	800189e <_scanf_i+0x11e>
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	05d9      	lsls	r1, r3, #23
 80018e2:	d50d      	bpl.n	8001900 <_scanf_i+0x180>
 80018e4:	42bd      	cmp	r5, r7
 80018e6:	d909      	bls.n	80018fc <_scanf_i+0x17c>
 80018e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80018ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80018f0:	4632      	mov	r2, r6
 80018f2:	4650      	mov	r0, sl
 80018f4:	4798      	blx	r3
 80018f6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80018fa:	464d      	mov	r5, r9
 80018fc:	42bd      	cmp	r5, r7
 80018fe:	d028      	beq.n	8001952 <_scanf_i+0x1d2>
 8001900:	6822      	ldr	r2, [r4, #0]
 8001902:	f012 0210 	ands.w	r2, r2, #16
 8001906:	d113      	bne.n	8001930 <_scanf_i+0x1b0>
 8001908:	702a      	strb	r2, [r5, #0]
 800190a:	6863      	ldr	r3, [r4, #4]
 800190c:	9e01      	ldr	r6, [sp, #4]
 800190e:	4639      	mov	r1, r7
 8001910:	4650      	mov	r0, sl
 8001912:	47b0      	blx	r6
 8001914:	f8d8 3000 	ldr.w	r3, [r8]
 8001918:	6821      	ldr	r1, [r4, #0]
 800191a:	1d1a      	adds	r2, r3, #4
 800191c:	f8c8 2000 	str.w	r2, [r8]
 8001920:	f011 0f20 	tst.w	r1, #32
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	d00f      	beq.n	8001948 <_scanf_i+0x1c8>
 8001928:	6018      	str	r0, [r3, #0]
 800192a:	68e3      	ldr	r3, [r4, #12]
 800192c:	3301      	adds	r3, #1
 800192e:	60e3      	str	r3, [r4, #12]
 8001930:	6923      	ldr	r3, [r4, #16]
 8001932:	1bed      	subs	r5, r5, r7
 8001934:	445d      	add	r5, fp
 8001936:	442b      	add	r3, r5
 8001938:	6123      	str	r3, [r4, #16]
 800193a:	2000      	movs	r0, #0
 800193c:	b007      	add	sp, #28
 800193e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001942:	f04f 0b00 	mov.w	fp, #0
 8001946:	e7ca      	b.n	80018de <_scanf_i+0x15e>
 8001948:	07ca      	lsls	r2, r1, #31
 800194a:	bf4c      	ite	mi
 800194c:	8018      	strhmi	r0, [r3, #0]
 800194e:	6018      	strpl	r0, [r3, #0]
 8001950:	e7eb      	b.n	800192a <_scanf_i+0x1aa>
 8001952:	2001      	movs	r0, #1
 8001954:	e7f2      	b.n	800193c <_scanf_i+0x1bc>
 8001956:	bf00      	nop
 8001958:	08001dc8 	.word	0x08001dc8
 800195c:	08001c11 	.word	0x08001c11
 8001960:	08001cf1 	.word	0x08001cf1
 8001964:	08001e17 	.word	0x08001e17

08001968 <__sccl>:
 8001968:	b570      	push	{r4, r5, r6, lr}
 800196a:	780b      	ldrb	r3, [r1, #0]
 800196c:	4604      	mov	r4, r0
 800196e:	2b5e      	cmp	r3, #94	@ 0x5e
 8001970:	bf0b      	itete	eq
 8001972:	784b      	ldrbeq	r3, [r1, #1]
 8001974:	1c4a      	addne	r2, r1, #1
 8001976:	1c8a      	addeq	r2, r1, #2
 8001978:	2100      	movne	r1, #0
 800197a:	bf08      	it	eq
 800197c:	2101      	moveq	r1, #1
 800197e:	3801      	subs	r0, #1
 8001980:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8001984:	f800 1f01 	strb.w	r1, [r0, #1]!
 8001988:	42a8      	cmp	r0, r5
 800198a:	d1fb      	bne.n	8001984 <__sccl+0x1c>
 800198c:	b90b      	cbnz	r3, 8001992 <__sccl+0x2a>
 800198e:	1e50      	subs	r0, r2, #1
 8001990:	bd70      	pop	{r4, r5, r6, pc}
 8001992:	f081 0101 	eor.w	r1, r1, #1
 8001996:	54e1      	strb	r1, [r4, r3]
 8001998:	4610      	mov	r0, r2
 800199a:	4602      	mov	r2, r0
 800199c:	f812 5b01 	ldrb.w	r5, [r2], #1
 80019a0:	2d2d      	cmp	r5, #45	@ 0x2d
 80019a2:	d005      	beq.n	80019b0 <__sccl+0x48>
 80019a4:	2d5d      	cmp	r5, #93	@ 0x5d
 80019a6:	d016      	beq.n	80019d6 <__sccl+0x6e>
 80019a8:	2d00      	cmp	r5, #0
 80019aa:	d0f1      	beq.n	8001990 <__sccl+0x28>
 80019ac:	462b      	mov	r3, r5
 80019ae:	e7f2      	b.n	8001996 <__sccl+0x2e>
 80019b0:	7846      	ldrb	r6, [r0, #1]
 80019b2:	2e5d      	cmp	r6, #93	@ 0x5d
 80019b4:	d0fa      	beq.n	80019ac <__sccl+0x44>
 80019b6:	42b3      	cmp	r3, r6
 80019b8:	dcf8      	bgt.n	80019ac <__sccl+0x44>
 80019ba:	3002      	adds	r0, #2
 80019bc:	461a      	mov	r2, r3
 80019be:	3201      	adds	r2, #1
 80019c0:	4296      	cmp	r6, r2
 80019c2:	54a1      	strb	r1, [r4, r2]
 80019c4:	dcfb      	bgt.n	80019be <__sccl+0x56>
 80019c6:	1af2      	subs	r2, r6, r3
 80019c8:	3a01      	subs	r2, #1
 80019ca:	1c5d      	adds	r5, r3, #1
 80019cc:	42b3      	cmp	r3, r6
 80019ce:	bfa8      	it	ge
 80019d0:	2200      	movge	r2, #0
 80019d2:	18ab      	adds	r3, r5, r2
 80019d4:	e7e1      	b.n	800199a <__sccl+0x32>
 80019d6:	4610      	mov	r0, r2
 80019d8:	e7da      	b.n	8001990 <__sccl+0x28>

080019da <__submore>:
 80019da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019de:	460c      	mov	r4, r1
 80019e0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80019e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80019e6:	4299      	cmp	r1, r3
 80019e8:	d11d      	bne.n	8001a26 <__submore+0x4c>
 80019ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019ee:	f7ff f92f 	bl	8000c50 <_malloc_r>
 80019f2:	b918      	cbnz	r0, 80019fc <__submore+0x22>
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a00:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001a02:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8001a06:	6360      	str	r0, [r4, #52]	@ 0x34
 8001a08:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8001a0c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001a10:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8001a14:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001a18:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8001a1c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8001a20:	6020      	str	r0, [r4, #0]
 8001a22:	2000      	movs	r0, #0
 8001a24:	e7e8      	b.n	80019f8 <__submore+0x1e>
 8001a26:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8001a28:	0077      	lsls	r7, r6, #1
 8001a2a:	463a      	mov	r2, r7
 8001a2c:	f000 f848 	bl	8001ac0 <_realloc_r>
 8001a30:	4605      	mov	r5, r0
 8001a32:	2800      	cmp	r0, #0
 8001a34:	d0de      	beq.n	80019f4 <__submore+0x1a>
 8001a36:	eb00 0806 	add.w	r8, r0, r6
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	4632      	mov	r2, r6
 8001a3e:	4640      	mov	r0, r8
 8001a40:	f000 f830 	bl	8001aa4 <memcpy>
 8001a44:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8001a48:	f8c4 8000 	str.w	r8, [r4]
 8001a4c:	e7e9      	b.n	8001a22 <__submore+0x48>

08001a4e <memmove>:
 8001a4e:	4288      	cmp	r0, r1
 8001a50:	b510      	push	{r4, lr}
 8001a52:	eb01 0402 	add.w	r4, r1, r2
 8001a56:	d902      	bls.n	8001a5e <memmove+0x10>
 8001a58:	4284      	cmp	r4, r0
 8001a5a:	4623      	mov	r3, r4
 8001a5c:	d807      	bhi.n	8001a6e <memmove+0x20>
 8001a5e:	1e43      	subs	r3, r0, #1
 8001a60:	42a1      	cmp	r1, r4
 8001a62:	d008      	beq.n	8001a76 <memmove+0x28>
 8001a64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a68:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001a6c:	e7f8      	b.n	8001a60 <memmove+0x12>
 8001a6e:	4402      	add	r2, r0
 8001a70:	4601      	mov	r1, r0
 8001a72:	428a      	cmp	r2, r1
 8001a74:	d100      	bne.n	8001a78 <memmove+0x2a>
 8001a76:	bd10      	pop	{r4, pc}
 8001a78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001a7c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001a80:	e7f7      	b.n	8001a72 <memmove+0x24>
	...

08001a84 <_sbrk_r>:
 8001a84:	b538      	push	{r3, r4, r5, lr}
 8001a86:	4d06      	ldr	r5, [pc, #24]	@ (8001aa0 <_sbrk_r+0x1c>)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	4604      	mov	r4, r0
 8001a8c:	4608      	mov	r0, r1
 8001a8e:	602b      	str	r3, [r5, #0]
 8001a90:	f7fe fe88 	bl	80007a4 <_sbrk>
 8001a94:	1c43      	adds	r3, r0, #1
 8001a96:	d102      	bne.n	8001a9e <_sbrk_r+0x1a>
 8001a98:	682b      	ldr	r3, [r5, #0]
 8001a9a:	b103      	cbz	r3, 8001a9e <_sbrk_r+0x1a>
 8001a9c:	6023      	str	r3, [r4, #0]
 8001a9e:	bd38      	pop	{r3, r4, r5, pc}
 8001aa0:	200001ac 	.word	0x200001ac

08001aa4 <memcpy>:
 8001aa4:	440a      	add	r2, r1
 8001aa6:	4291      	cmp	r1, r2
 8001aa8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001aac:	d100      	bne.n	8001ab0 <memcpy+0xc>
 8001aae:	4770      	bx	lr
 8001ab0:	b510      	push	{r4, lr}
 8001ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001aba:	4291      	cmp	r1, r2
 8001abc:	d1f9      	bne.n	8001ab2 <memcpy+0xe>
 8001abe:	bd10      	pop	{r4, pc}

08001ac0 <_realloc_r>:
 8001ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac4:	4680      	mov	r8, r0
 8001ac6:	4615      	mov	r5, r2
 8001ac8:	460c      	mov	r4, r1
 8001aca:	b921      	cbnz	r1, 8001ad6 <_realloc_r+0x16>
 8001acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	f7ff b8bd 	b.w	8000c50 <_malloc_r>
 8001ad6:	b92a      	cbnz	r2, 8001ae4 <_realloc_r+0x24>
 8001ad8:	f7ff f84e 	bl	8000b78 <_free_r>
 8001adc:	2400      	movs	r4, #0
 8001ade:	4620      	mov	r0, r4
 8001ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ae4:	f000 f906 	bl	8001cf4 <_malloc_usable_size_r>
 8001ae8:	4285      	cmp	r5, r0
 8001aea:	4606      	mov	r6, r0
 8001aec:	d802      	bhi.n	8001af4 <_realloc_r+0x34>
 8001aee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001af2:	d8f4      	bhi.n	8001ade <_realloc_r+0x1e>
 8001af4:	4629      	mov	r1, r5
 8001af6:	4640      	mov	r0, r8
 8001af8:	f7ff f8aa 	bl	8000c50 <_malloc_r>
 8001afc:	4607      	mov	r7, r0
 8001afe:	2800      	cmp	r0, #0
 8001b00:	d0ec      	beq.n	8001adc <_realloc_r+0x1c>
 8001b02:	42b5      	cmp	r5, r6
 8001b04:	462a      	mov	r2, r5
 8001b06:	4621      	mov	r1, r4
 8001b08:	bf28      	it	cs
 8001b0a:	4632      	movcs	r2, r6
 8001b0c:	f7ff ffca 	bl	8001aa4 <memcpy>
 8001b10:	4621      	mov	r1, r4
 8001b12:	4640      	mov	r0, r8
 8001b14:	f7ff f830 	bl	8000b78 <_free_r>
 8001b18:	463c      	mov	r4, r7
 8001b1a:	e7e0      	b.n	8001ade <_realloc_r+0x1e>

08001b1c <_strtol_l.constprop.0>:
 8001b1c:	2b24      	cmp	r3, #36	@ 0x24
 8001b1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b22:	4686      	mov	lr, r0
 8001b24:	4690      	mov	r8, r2
 8001b26:	d801      	bhi.n	8001b2c <_strtol_l.constprop.0+0x10>
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d106      	bne.n	8001b3a <_strtol_l.constprop.0+0x1e>
 8001b2c:	f7fe fff8 	bl	8000b20 <__errno>
 8001b30:	2316      	movs	r3, #22
 8001b32:	6003      	str	r3, [r0, #0]
 8001b34:	2000      	movs	r0, #0
 8001b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b3a:	4834      	ldr	r0, [pc, #208]	@ (8001c0c <_strtol_l.constprop.0+0xf0>)
 8001b3c:	460d      	mov	r5, r1
 8001b3e:	462a      	mov	r2, r5
 8001b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001b44:	5d06      	ldrb	r6, [r0, r4]
 8001b46:	f016 0608 	ands.w	r6, r6, #8
 8001b4a:	d1f8      	bne.n	8001b3e <_strtol_l.constprop.0+0x22>
 8001b4c:	2c2d      	cmp	r4, #45	@ 0x2d
 8001b4e:	d12d      	bne.n	8001bac <_strtol_l.constprop.0+0x90>
 8001b50:	782c      	ldrb	r4, [r5, #0]
 8001b52:	2601      	movs	r6, #1
 8001b54:	1c95      	adds	r5, r2, #2
 8001b56:	f033 0210 	bics.w	r2, r3, #16
 8001b5a:	d109      	bne.n	8001b70 <_strtol_l.constprop.0+0x54>
 8001b5c:	2c30      	cmp	r4, #48	@ 0x30
 8001b5e:	d12a      	bne.n	8001bb6 <_strtol_l.constprop.0+0x9a>
 8001b60:	782a      	ldrb	r2, [r5, #0]
 8001b62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8001b66:	2a58      	cmp	r2, #88	@ 0x58
 8001b68:	d125      	bne.n	8001bb6 <_strtol_l.constprop.0+0x9a>
 8001b6a:	786c      	ldrb	r4, [r5, #1]
 8001b6c:	2310      	movs	r3, #16
 8001b6e:	3502      	adds	r5, #2
 8001b70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8001b74:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8001b78:	2200      	movs	r2, #0
 8001b7a:	fbbc f9f3 	udiv	r9, ip, r3
 8001b7e:	4610      	mov	r0, r2
 8001b80:	fb03 ca19 	mls	sl, r3, r9, ip
 8001b84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8001b88:	2f09      	cmp	r7, #9
 8001b8a:	d81b      	bhi.n	8001bc4 <_strtol_l.constprop.0+0xa8>
 8001b8c:	463c      	mov	r4, r7
 8001b8e:	42a3      	cmp	r3, r4
 8001b90:	dd27      	ble.n	8001be2 <_strtol_l.constprop.0+0xc6>
 8001b92:	1c57      	adds	r7, r2, #1
 8001b94:	d007      	beq.n	8001ba6 <_strtol_l.constprop.0+0x8a>
 8001b96:	4581      	cmp	r9, r0
 8001b98:	d320      	bcc.n	8001bdc <_strtol_l.constprop.0+0xc0>
 8001b9a:	d101      	bne.n	8001ba0 <_strtol_l.constprop.0+0x84>
 8001b9c:	45a2      	cmp	sl, r4
 8001b9e:	db1d      	blt.n	8001bdc <_strtol_l.constprop.0+0xc0>
 8001ba0:	fb00 4003 	mla	r0, r0, r3, r4
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001baa:	e7eb      	b.n	8001b84 <_strtol_l.constprop.0+0x68>
 8001bac:	2c2b      	cmp	r4, #43	@ 0x2b
 8001bae:	bf04      	itt	eq
 8001bb0:	782c      	ldrbeq	r4, [r5, #0]
 8001bb2:	1c95      	addeq	r5, r2, #2
 8001bb4:	e7cf      	b.n	8001b56 <_strtol_l.constprop.0+0x3a>
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1da      	bne.n	8001b70 <_strtol_l.constprop.0+0x54>
 8001bba:	2c30      	cmp	r4, #48	@ 0x30
 8001bbc:	bf0c      	ite	eq
 8001bbe:	2308      	moveq	r3, #8
 8001bc0:	230a      	movne	r3, #10
 8001bc2:	e7d5      	b.n	8001b70 <_strtol_l.constprop.0+0x54>
 8001bc4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001bc8:	2f19      	cmp	r7, #25
 8001bca:	d801      	bhi.n	8001bd0 <_strtol_l.constprop.0+0xb4>
 8001bcc:	3c37      	subs	r4, #55	@ 0x37
 8001bce:	e7de      	b.n	8001b8e <_strtol_l.constprop.0+0x72>
 8001bd0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001bd4:	2f19      	cmp	r7, #25
 8001bd6:	d804      	bhi.n	8001be2 <_strtol_l.constprop.0+0xc6>
 8001bd8:	3c57      	subs	r4, #87	@ 0x57
 8001bda:	e7d8      	b.n	8001b8e <_strtol_l.constprop.0+0x72>
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001be0:	e7e1      	b.n	8001ba6 <_strtol_l.constprop.0+0x8a>
 8001be2:	1c53      	adds	r3, r2, #1
 8001be4:	d108      	bne.n	8001bf8 <_strtol_l.constprop.0+0xdc>
 8001be6:	2322      	movs	r3, #34	@ 0x22
 8001be8:	f8ce 3000 	str.w	r3, [lr]
 8001bec:	4660      	mov	r0, ip
 8001bee:	f1b8 0f00 	cmp.w	r8, #0
 8001bf2:	d0a0      	beq.n	8001b36 <_strtol_l.constprop.0+0x1a>
 8001bf4:	1e69      	subs	r1, r5, #1
 8001bf6:	e006      	b.n	8001c06 <_strtol_l.constprop.0+0xea>
 8001bf8:	b106      	cbz	r6, 8001bfc <_strtol_l.constprop.0+0xe0>
 8001bfa:	4240      	negs	r0, r0
 8001bfc:	f1b8 0f00 	cmp.w	r8, #0
 8001c00:	d099      	beq.n	8001b36 <_strtol_l.constprop.0+0x1a>
 8001c02:	2a00      	cmp	r2, #0
 8001c04:	d1f6      	bne.n	8001bf4 <_strtol_l.constprop.0+0xd8>
 8001c06:	f8c8 1000 	str.w	r1, [r8]
 8001c0a:	e794      	b.n	8001b36 <_strtol_l.constprop.0+0x1a>
 8001c0c:	08001e23 	.word	0x08001e23

08001c10 <_strtol_r>:
 8001c10:	f7ff bf84 	b.w	8001b1c <_strtol_l.constprop.0>

08001c14 <_strtoul_l.constprop.0>:
 8001c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c18:	4e34      	ldr	r6, [pc, #208]	@ (8001cec <_strtoul_l.constprop.0+0xd8>)
 8001c1a:	4686      	mov	lr, r0
 8001c1c:	460d      	mov	r5, r1
 8001c1e:	4628      	mov	r0, r5
 8001c20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001c24:	5d37      	ldrb	r7, [r6, r4]
 8001c26:	f017 0708 	ands.w	r7, r7, #8
 8001c2a:	d1f8      	bne.n	8001c1e <_strtoul_l.constprop.0+0xa>
 8001c2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8001c2e:	d12f      	bne.n	8001c90 <_strtoul_l.constprop.0+0x7c>
 8001c30:	782c      	ldrb	r4, [r5, #0]
 8001c32:	2701      	movs	r7, #1
 8001c34:	1c85      	adds	r5, r0, #2
 8001c36:	f033 0010 	bics.w	r0, r3, #16
 8001c3a:	d109      	bne.n	8001c50 <_strtoul_l.constprop.0+0x3c>
 8001c3c:	2c30      	cmp	r4, #48	@ 0x30
 8001c3e:	d12c      	bne.n	8001c9a <_strtoul_l.constprop.0+0x86>
 8001c40:	7828      	ldrb	r0, [r5, #0]
 8001c42:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8001c46:	2858      	cmp	r0, #88	@ 0x58
 8001c48:	d127      	bne.n	8001c9a <_strtoul_l.constprop.0+0x86>
 8001c4a:	786c      	ldrb	r4, [r5, #1]
 8001c4c:	2310      	movs	r3, #16
 8001c4e:	3502      	adds	r5, #2
 8001c50:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8001c54:	2600      	movs	r6, #0
 8001c56:	fbb8 f8f3 	udiv	r8, r8, r3
 8001c5a:	fb03 f908 	mul.w	r9, r3, r8
 8001c5e:	ea6f 0909 	mvn.w	r9, r9
 8001c62:	4630      	mov	r0, r6
 8001c64:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8001c68:	f1bc 0f09 	cmp.w	ip, #9
 8001c6c:	d81c      	bhi.n	8001ca8 <_strtoul_l.constprop.0+0x94>
 8001c6e:	4664      	mov	r4, ip
 8001c70:	42a3      	cmp	r3, r4
 8001c72:	dd2a      	ble.n	8001cca <_strtoul_l.constprop.0+0xb6>
 8001c74:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8001c78:	d007      	beq.n	8001c8a <_strtoul_l.constprop.0+0x76>
 8001c7a:	4580      	cmp	r8, r0
 8001c7c:	d322      	bcc.n	8001cc4 <_strtoul_l.constprop.0+0xb0>
 8001c7e:	d101      	bne.n	8001c84 <_strtoul_l.constprop.0+0x70>
 8001c80:	45a1      	cmp	r9, r4
 8001c82:	db1f      	blt.n	8001cc4 <_strtoul_l.constprop.0+0xb0>
 8001c84:	fb00 4003 	mla	r0, r0, r3, r4
 8001c88:	2601      	movs	r6, #1
 8001c8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001c8e:	e7e9      	b.n	8001c64 <_strtoul_l.constprop.0+0x50>
 8001c90:	2c2b      	cmp	r4, #43	@ 0x2b
 8001c92:	bf04      	itt	eq
 8001c94:	782c      	ldrbeq	r4, [r5, #0]
 8001c96:	1c85      	addeq	r5, r0, #2
 8001c98:	e7cd      	b.n	8001c36 <_strtoul_l.constprop.0+0x22>
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1d8      	bne.n	8001c50 <_strtoul_l.constprop.0+0x3c>
 8001c9e:	2c30      	cmp	r4, #48	@ 0x30
 8001ca0:	bf0c      	ite	eq
 8001ca2:	2308      	moveq	r3, #8
 8001ca4:	230a      	movne	r3, #10
 8001ca6:	e7d3      	b.n	8001c50 <_strtoul_l.constprop.0+0x3c>
 8001ca8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8001cac:	f1bc 0f19 	cmp.w	ip, #25
 8001cb0:	d801      	bhi.n	8001cb6 <_strtoul_l.constprop.0+0xa2>
 8001cb2:	3c37      	subs	r4, #55	@ 0x37
 8001cb4:	e7dc      	b.n	8001c70 <_strtoul_l.constprop.0+0x5c>
 8001cb6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8001cba:	f1bc 0f19 	cmp.w	ip, #25
 8001cbe:	d804      	bhi.n	8001cca <_strtoul_l.constprop.0+0xb6>
 8001cc0:	3c57      	subs	r4, #87	@ 0x57
 8001cc2:	e7d5      	b.n	8001c70 <_strtoul_l.constprop.0+0x5c>
 8001cc4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8001cc8:	e7df      	b.n	8001c8a <_strtoul_l.constprop.0+0x76>
 8001cca:	1c73      	adds	r3, r6, #1
 8001ccc:	d106      	bne.n	8001cdc <_strtoul_l.constprop.0+0xc8>
 8001cce:	2322      	movs	r3, #34	@ 0x22
 8001cd0:	f8ce 3000 	str.w	r3, [lr]
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	b932      	cbnz	r2, 8001ce6 <_strtoul_l.constprop.0+0xd2>
 8001cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cdc:	b107      	cbz	r7, 8001ce0 <_strtoul_l.constprop.0+0xcc>
 8001cde:	4240      	negs	r0, r0
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	d0f9      	beq.n	8001cd8 <_strtoul_l.constprop.0+0xc4>
 8001ce4:	b106      	cbz	r6, 8001ce8 <_strtoul_l.constprop.0+0xd4>
 8001ce6:	1e69      	subs	r1, r5, #1
 8001ce8:	6011      	str	r1, [r2, #0]
 8001cea:	e7f5      	b.n	8001cd8 <_strtoul_l.constprop.0+0xc4>
 8001cec:	08001e23 	.word	0x08001e23

08001cf0 <_strtoul_r>:
 8001cf0:	f7ff bf90 	b.w	8001c14 <_strtoul_l.constprop.0>

08001cf4 <_malloc_usable_size_r>:
 8001cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cf8:	1f18      	subs	r0, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bfbc      	itt	lt
 8001cfe:	580b      	ldrlt	r3, [r1, r0]
 8001d00:	18c0      	addlt	r0, r0, r3
 8001d02:	4770      	bx	lr

08001d04 <_init>:
 8001d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d06:	bf00      	nop
 8001d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d0a:	bc08      	pop	{r3}
 8001d0c:	469e      	mov	lr, r3
 8001d0e:	4770      	bx	lr

08001d10 <_fini>:
 8001d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d12:	bf00      	nop
 8001d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d16:	bc08      	pop	{r3}
 8001d18:	469e      	mov	lr, r3
 8001d1a:	4770      	bx	lr
